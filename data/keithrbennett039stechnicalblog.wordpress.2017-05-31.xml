<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.7.5" created="2017-05-31 04:01" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Keith R. Bennett&#039;s Technical Blog</title>
	<link>http://blog.bbs-software.com</link>
	<description>Technical Explorations</description>
	<pubDate>Wed, 31 May 2017 04:01:27 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.bbs-software.com</wp:base_site_url>
	<wp:base_blog_url>http://blog.bbs-software.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[keithrbennett]]></wp:author_login><wp:author_email><![CDATA[bad-email@bad-domain.com]]></wp:author_email><wp:author_display_name><![CDATA[keithrbennett]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[jruby]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[JRuby]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
	<wp:tag>
		<wp:term_id>3</wp:term_id>
		<wp:tag_slug><![CDATA[bangkok]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bangkok]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>4</wp:term_id>
		<wp:tag_slug><![CDATA[bangkok-hackerspace-bangspace]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bangkok hackerspace bangspace]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>5</wp:term_id>
		<wp:tag_slug><![CDATA[bangspace]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bangspace]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>6</wp:term_id>
		<wp:tag_slug><![CDATA[clojure]]></wp:tag_slug>
		<wp:tag_name><![CDATA[clojure]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[code-blocks]]></wp:tag_slug>
		<wp:tag_name><![CDATA[code blocks]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[code-conventions]]></wp:tag_slug>
		<wp:tag_name><![CDATA[code conventions]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[code-standards]]></wp:tag_slug>
		<wp:tag_name><![CDATA[code standards]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[coding-conventions]]></wp:tag_slug>
		<wp:tag_name><![CDATA[coding conventions]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[coding-standards]]></wp:tag_slug>
		<wp:tag_name><![CDATA[coding standards]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>12</wp:term_id>
		<wp:tag_slug><![CDATA[conversion]]></wp:tag_slug>
		<wp:tag_name><![CDATA[conversion]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>13</wp:term_id>
		<wp:tag_slug><![CDATA[converter]]></wp:tag_slug>
		<wp:tag_name><![CDATA[converter]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>14</wp:term_id>
		<wp:tag_slug><![CDATA[gnome]]></wp:tag_slug>
		<wp:tag_name><![CDATA[gnome]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>15</wp:term_id>
		<wp:tag_slug><![CDATA[gparted]]></wp:tag_slug>
		<wp:tag_name><![CDATA[gparted]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>16</wp:term_id>
		<wp:tag_slug><![CDATA[hackerspace]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hackerspace]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[hash]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hash]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[java]]></wp:tag_slug>
		<wp:tag_name><![CDATA[java]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[jruby]]></wp:tag_slug>
		<wp:tag_name><![CDATA[jruby]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[jvm]]></wp:tag_slug>
		<wp:tag_name><![CDATA[jvm]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[notation]]></wp:tag_slug>
		<wp:tag_name><![CDATA[notation]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>22</wp:term_id>
		<wp:tag_slug><![CDATA[partition-editor]]></wp:tag_slug>
		<wp:tag_name><![CDATA[partition editor]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>23</wp:term_id>
		<wp:tag_slug><![CDATA[partition-magic]]></wp:tag_slug>
		<wp:tag_name><![CDATA[partition magic]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>24</wp:term_id>
		<wp:tag_slug><![CDATA[sun]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sun]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>25</wp:term_id>
		<wp:tag_slug><![CDATA[sun-java-code-coding-conventions-standards]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sun java code coding conventions standards]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[swing]]></wp:tag_slug>
		<wp:tag_name><![CDATA[swing]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[temperature]]></wp:tag_slug>
		<wp:tag_name><![CDATA[temperature]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[temperature-converter]]></wp:tag_slug>
		<wp:tag_name><![CDATA[temperature converter]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[user-interface-design-principles-source-code-design]]></wp:tag_slug>
		<wp:tag_name><![CDATA[user interface design principles source code design]]></wp:tag_name>
	</wp:tag>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bangkok]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bangkok]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bangkok-hackerspace-bangspace]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bangkok hackerspace bangspace]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bangspace]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bangspace]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[blogroll]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Blogroll]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[clojure]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[clojure]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[code-blocks]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[code blocks]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[code-conventions]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[code conventions]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[code-standards]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[code standards]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[coding-conventions]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[coding conventions]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[coding-standards]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[coding standards]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[conversion]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[conversion]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[converter]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[converter]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[gnome]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[gnome]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[gparted]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[gparted]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hackerspace]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hackerspace]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hash]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hash]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[java]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[java]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jruby]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[JRuby]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jruby]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[jruby]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jvm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[jvm]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[notation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[notation]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[partition-editor]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[partition editor]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[partition-magic]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[partition magic]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sun]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sun]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sun-java-code-coding-conventions-standards]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sun java code coding conventions standards]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[swing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[swing]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[temperature]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[temperature]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[temperature-converter]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[temperature converter]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[test-menu]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Test Menu]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[user-interface-design-principles-source-code-design]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[user interface design principles source code design]]></wp:term_name>
	</wp:term>
	<wp:term><wp:term_id>31</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[test-menu]]></wp:term_slug><wp:term_name><![CDATA[Test Menu]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=4.7.5</generator>

<image>
	<url>http://blog.bbs-software.com/wp-content/uploads/2017/05/cropped-me-sitting-with-laptop-32x32.jpg</url>
	<title>Keith R. Bennett&#039;s Technical Blog</title>
	<link>http://blog.bbs-software.com</link>
	<width>32</width>
	<height>32</height>
</image> 

	<item>
		<title>Sample Page</title>
		<link>http://blog.bbs-software.com/index.php/sample-page__trashed-2/</link>
		<pubDate>Wed, 31 May 2017 03:42:36 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://blog.bbs-software.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example page. It's different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:

<blockquote>Hi there! I'm a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin' caught in the rain.)</blockquote>

...or something like this:

<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>

As a new WordPress user, you should go to <a href="http://blog.bbs-software.com/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2017-05-31 03:42:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-31 03:42:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sample-page__trashed-2]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1496202875]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[sample-page]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sample Page</title>
		<link>http://blog.bbs-software.com/index.php/sample-page__trashed/</link>
		<pubDate>Tue, 30 May 2017 20:50:46 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://blog.bbs-software.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example page. It's different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:

<blockquote>Hi there! I'm a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin' caught in the rain.)</blockquote>

...or something like this:

<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>

As a new WordPress user, you should go to <a href="http://blog.bbs-software.com/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2017-05-30 20:50:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-30 20:50:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sample-page__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1496178679]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[sample-page]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>About Bennett Business Solutions, Inc.</title>
		<link>http://blog.bbs-software.com/index.php/bbs/</link>
		<pubDate>Mon, 29 May 2017 20:20:59 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://blog.bbs-software.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[Bennett Business Solutions, Inc. is a small corporation through which I, Keith Bennett, perform technical services. These services include:
<ul>
 	<li>Custom Software Development</li>
 	<li>Mentoring and Tutoring</li>
 	<li>Firefighting (Troubleshooting)</li>
 	<li>Refactoring</li>
 	<li>Consultations - Strategy and Architecture</li>
</ul>
My LinkedIn profile is at http://linkedin.com/in/keithrbennett.

Feel free to contact me if you have any needs for which I might be helpful. The best way to reach me is by email: kbennett at bbs-software.com (replace " at " with "@").

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2017-05-29 20:20:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-29 20:20:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bbs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpb_vc_js_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_vc_post_settings]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:10:"vc_grid_id";a:0:{}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JRuby -- A Better Language for the Java Virtual Machine</title>
		<link>http://blog.bbs-software.com/index.php/2009/02/26/jruby-a-better-language-for-the-java-virtual-machine/</link>
		<pubDate>Thu, 26 Feb 2009 07:53:22 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[A powerful synergy results when combining the power, reliability, portability, and rich library set of the Java platform with the power and flexibility of JRuby.  This article will discuss a couple of ways in which JRuby surpasses Java as a programming language for the JVM:
<ol>
	<li>Code as first class objects - code blocks, lambdas, and procs can exist and be passed around for the most part like any other objects.  There is no need to create a class to contain them as there is in Java.</li>
	<li>Syntactic sugar for the specification of hash values as parameters - hash (map, in Java lingo) key/value pairs can be passed to a function literally, and the function will receive them as a single hash.  In other words, they can be passed without the need for the programmer to create and populate a hash instance.</li>
</ol>
In order to contrast Java and JRuby, and showcase the above features, we will implement a Fahrenheit/Celsius temperature converter in both Java and JRuby that uses Java Swing as its GUI library.  The source code can be found at <a title="http://is.gd/n3Je" href="http://is.gd/n3Je" target="_blank">http://is.gd/n3Je</a>. (The Git repo main page for this project is at <a href="http://github.com/keithrbennett/multilanguage-swing">http://github.com/keithrbennett/multilanguage-swing</a>. The README file has instructions for how to run the Java, Ruby, and Clojure versions.

Here is an image of the application's sole window.  There are text fields for entering the temperature, and buttons and menu items to perform the conversions, clear the text fields, and exit the program.

[caption id="attachment_13" align="aligncenter" width="499" caption="the temperature conversion Swing app window"]<img class="size-full wp-image-13" title="converter-window" src="http://www.bbs-software.com/blog/wp-content/uploads/2009/02/converter-window.png" alt="The Fahrenheit  Celsius temperature conversion Swing app window" width="499" height="148" />[/caption]

<!--more-->

We'll get to JRuby soon, but first a little about the Swing issues we'll be addressing in comparing JRuby with Java.

Swing enables the sharing of behavior among visual components such as menu items and buttons via the sharing of Action objects (or, to be precise, implementations of the javax.swing.Action interface).  So, for example, in this app there is a single Exit action object shared by both the Exit button and the Exit item of the File Menu (that is, both the button and menu item contain references to the same action).

When an action is modified, as, for example, to enable or disable it, then all components expressing that action modify their state and appearance accordingly.  When the program starts up, the conversion and clear buttons' actions are not appropriate given that both text fields are empty; therefore, those actions are disabled.  Although you can't see it in this picture, in addition to the buttons being disabled, the corresponding menu items are disabled as well.

Swing is pretty good about conforming to the MVC (model/view/controller) principle.  Even the lowly text field contains a reference to a model, which is an implementation of the javax.swing.text.Document interface.  You can attach listeners to this model, so that when the text changes you can inspect the contents and respond accordingly.  (A common Swing programming mistake is to listen to keyboard events instead, but this does not catch some cut and paste events, nor the programmatic setting of the content.)

These two Swing features enable the effective, clean, and dry implementation of enabling and disabling of action components based on the program's state at any given time.  We merely attach document listeners to the text fields that hook into text changes, and enable or disable the actions as appropriate when they are called.

Unfortunately, the Swing DocumentListener interface requires implementing behavior for three different types of text events (change, insert, and remove), and provides no way to simply specify a single behavior that will be applied to all three.  (In fact, in several years of Swing programming I never encountered a case where the respective events needed to be handled differently, for performance or any other reason.)  We will therefore create an adapter that remedies this.  The implementations of this adapter in Java and JRuby will highlight the greater flexibility of JRuby through its support of code blocks as first class objects and its syntactic sugar that makes passing hash entries more natural.

The Java adapter is implemented here as the SimpleDocumentListener that implements DocumentListener.  It has a single abstract method that must be implemented by its subclasses, and delegates to that method from all three DocumentListener interface methods.  Note that it is necessary to create a new class inheriting from SimpleDocumentListener in order to use it.  Here is the code:

[sourcecode language="java"]
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 * Simplifies the DocumentListener interface by having all three
 * interface methods delegate to a single method.
 *
 * To use this abstract class, subclass it and implement the abstract
 * method handleDocumentEvent().
 */
public abstract class SimpleDocumentListener implements DocumentListener {

    /**
     * Implement this method when subclassing this class.
     * It will be called whenever a DocumentEvent occurs.
     */
    abstract public void handleDocumentEvent(DocumentEvent event);

    public void changedUpdate(DocumentEvent event) {
        handleDocumentEvent(event);
    }

    public void insertUpdate(DocumentEvent event) {
        handleDocumentEvent(event);
    }

    public void removeUpdate(DocumentEvent event) {
        handleDocumentEvent(event);
    }
}
[/sourcecode]

Here's how the class is used to enable the Fahrenheit to Celsius conversion only when there is a number in the Fahrenheit text field:

[sourcecode language="java"]
        fahrTextField.getDocument().addDocumentListener(new SimpleDocumentListener() {
            public void handleDocumentEvent(DocumentEvent event) {
                f2cAction.setEnabled(doubleStringIsValid(fahrTextField.getText()));
            }
        });
[/sourcecode]

Although the anonymous inner class specification is concise, you are still creating another class.  Furthermore, because the behavior must live within a class, it is more difficult to reuse the functionality in multiple places.

In contrast, JRuby supports code blocks and objects such as lambdas that enable specifying the behavior by itself, without requiring the ceremony of creating an entire class to contain it.  We exploit this by implementing the JRuby adapter as a class that is instantiated with such a code block or object. Here's the JRuby implementation of SimpleDocumentListener:

[sourcecode language="ruby"]
# Simple implementation of javax.swing.event.DocumentListener that
# enables specifying a single code block that will be called
# when any of the three DocumentListener methods are called.
#
# Note that unlike Java, where it is necessary to subclass the abstract
# Java class SimpleDocumentListener, we can merely create an instance of
# the Ruby class SimpleDocumentListener with the code block we want
# executed when a DocumentEvent occurs.   This code can be in the form of
# a code block, lambda, or proc.

require 'java'

import javax.swing.event.DocumentListener

class SimpleDocumentListener

  # This is how we declare that this class implements the Java
  # DocumentListener interface in JRuby:
  include DocumentListener

  attr_accessor :behavior

  def initialize(&behavior)
    self.behavior = behavior
  end

  def changedUpdate(event);  behavior.call event; end
  def insertUpdate(event);   behavior.call event; end
  def removeUpdate(event);   behavior.call event; end

end
[/sourcecode]

And here's how it is used:

[sourcecode language="ruby"]
    fahr_text_field.getDocument.addDocumentListener(
        SimpleDocumentListener.new do
          f2c_action.setEnabled double_string_valid?(fahr_text_field.getText)
        end)
[/sourcecode]

Note that unlike Java, where it is necessary to subclass the abstract  Java class SimpleDocumentListener, we merely create an instance of  the Ruby SimpleDocumentListener with the behavior we want executed when a DocumentEvent occurs.  Specifying the code block parameter in the function definition with the ampersand enables passing a code block inline (as above), or passing code in the form of a lambda or proc object as in:

[sourcecode language="ruby"]
    f2c_enabler = lambda do
      f2c_action.setEnabled double_string_valid?(fahr_text_field.getText)
    end
    fahr_text_field.getDocument.addDocumentListener(
            SimpleDocumentListener.new(&f2c_enabler))
[/sourcecode]

<hr />As with Swing listeners, Swing actions written in Java are implemented as classes, although usually the only thing that differs among them is the behavior specified in the actionPeformed method.  (One could argue that a separate class <em>is</em> the appropriate way to express nontrivial processing, but then again if it is nontrivial the bulk of the processing might really belong in a model type class and not the action.  This not only makes testing easier, it also makes it much easier to provide an alternate or replacement user or scripting interface; otherwise put, it increases code coherence.) We can therefore employ the same strategy as we did with the document listener.  Here is how the exit action is specified in Java:

[sourcecode language="java"]
    private class ExitAction extends AbstractAction {

        ExitAction() {
            super("Exit");
            putValue(Action.SHORT_DESCRIPTION, "Exit this program");
            putValue(Action.ACCELERATOR_KEY,
                    KeyStroke.getKeyStroke(KeyEvent.VK_X, Event.CTRL_MASK));
        }

        public void actionPerformed(ActionEvent event) {
            System.exit(0);
        }
    }
[/sourcecode]

As you see, putValue is used to store key/value pairs in the action.  There are multiple options; they are listed in a table at <a href="http://java.sun.com/javase/6/docs/api/javax/swing/Action.html">http://java.sun.com/javase/6/docs/api/javax/swing/Action.html</a>.

In Ruby, we create an adapter class that allows specifying the action's name, options (tooltip text and keyboard accelerator in this case), and behavior:

[sourcecode language="ruby"]
require 'java'

# When running FrameInRuby, this will generate a warning because
# it is already imported in FrameInRuby.  In JRuby, unfortunately,
# imports of Java classes are not confined to the file
# in which they are specified; once you import a class,
# it will be imported for other classes as well.
# This may be fixed in a future version of JRuby.
import javax.swing.AbstractAction

# This class enables the specification of a Swing action
# in a format natural to Ruby.
#
# It takes and stores a code block, lambda, or proc as the
# action's behavior, so there is no need to define a new class
# for each behavior. Also, it allows the optional specification
# of the action's properties via the passing of hash entries,
# which are effectively named parameters.
class SwingAction < AbstractAction

  attr_accessor :behavior

# Creates the action object with a behavior, name, and options:
#
# behavior - a behavior can be a code block, lambda,
# or a Proc.
#
# name - this is the name that will be used for the menu option,
# button caption, etc.  Note that if an app is internationalized,
# the name will vary by locale, so it is better to identify an action
# by the action instance itself rather than its name.
#
# options - these are hash entries that will be passed to
# AbstractAction.putValue().  Keys should be constants from the
# javax.swing.Action interface, such as Action.SHORT_DESCRIPTION.
# Ruby allows hash entries to passed as the last parameters to a
# function, and they can be accessed inside the method as a single
# hash object.
#
# Example:
#
# self.exit_action = SwingAction.new(
#    "Exit",
#     Action::SHORT_DESCRIPTION => "Exit this program",
#     Action::ACCELERATOR_KEY =>
#         KeyStroke.getKeyStroke(KeyEvent::VK_X, Event::CTRL_MASK)) do
#       System.exit 0
#     end
#
  def initialize(name, options=nil, &behavior)
    super name
    options.each { |key, value| putValue key, value } if options
    self.behavior = behavior
  end

  def actionPerformed(action_event)
    behavior.call action_event
  end
end
[/sourcecode]

Note the initialize method.  The options parameter default to nil, but if any key value pairs are specified, they will be contained in a hash instance named <em>options</em>.  The <em>options.each</em> line illustrates a small part of the power of functional programming in Ruby.  Iterating over the contents of the hash is clear and concise.  For each key value pair, <em>putValue</em> is called with the key and the value, in that order.  The whole thing is done only if <em>options</em> is not nil.

Here's how the exit action is specified in the JRuby program:

[sourcecode language="ruby"]
    self.exit_action = SwingAction.new("Exit",
        Action::SHORT_DESCRIPTION => "Exit this program",
        Action::ACCELERATOR_KEY =>
            KeyStroke.getKeyStroke(KeyEvent::VK_X, Event::CTRL_MASK))
        do |event|
          java.lang.System::exit 0
        end
[/sourcecode]

While this may seem a bit crowded at first glance, notice that you are passing the name, options, and behavior, in that order.  In that sense it is a logical and legible call.  The <em>=&gt;</em> operator aids in visual recognition of the key/value pairs, so it's easy for the eye to identify the various parts of this call.

You can see that the two hash entries are passed as if they were two separate parameters.  However, the function to which they are passed will see them as a single hash instance containing those two key/value pairs.  The <em>do/end</em> pair specifies a literal code block which will be seen by the function as the behavior parameter.  We could also have passed a variable containing a lambda or a proc.

Although the JRuby features described here require some learning for the Java programmer, that learning is, in my opinion, well worth the cost.  The greater conciseness, power, and flexibility of JRuby make writing Swing apps shorter, easier, and of higher quality.  And we've only scratched the surface of JRuby -- there's much, much more.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2009-02-26 02:53:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-02-26 07:53:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jruby-a-better-language-for-the-java-virtual-machine]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-blocks"><![CDATA[code blocks]]></category>
		<category domain="post_tag" nicename="conversion"><![CDATA[conversion]]></category>
		<category domain="post_tag" nicename="converter"><![CDATA[converter]]></category>
		<category domain="post_tag" nicename="hash"><![CDATA[hash]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
		<category domain="post_tag" nicename="notation"><![CDATA[notation]]></category>
		<category domain="post_tag" nicename="swing"><![CDATA[swing]]></category>
		<category domain="post_tag" nicename="temperature"><![CDATA[temperature]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Thomas Enebo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tom.enebo@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.jruby.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[66.77.227.239]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-26 15:27:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-26 20:27:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We just filed an enhancement for the warning on multiple imports:

http://jira.codehaus.org/browse/JRUBY-3453

There is no reason we cannot detect that the java file has already been imported already.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.49.254.109]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-01 10:07:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-01 15:07:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thomas, thanks for filing the enhancement, and thanks for letting us know.  I've registered myself as a watcher of that enhancement, and will post notification here when it is fixed.

Keep up the great work!

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.34.119.129]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-12 09:05:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-12 14:05:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've modified the source so that all the Ruby code is in FrameInRuby.rb, and added a link in the article to that file on the Github repository (it's http://is.gd/n3Je).  This should make it simpler to see the source code to which the article refers.

In addition, the README (http://is.gd/n3SN) has been clarified and now includes for running the Clojure version of the program.

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Same Temperature Converter, Different Language &#8212; Clojure &laquo; Keith Bennett&#8217;s Technical Blog]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://krbtech.wordpress.com/2009/03/16/same-temperature-converter-different-language-clojure/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.200.246.66]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-16 17:00:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-16 22:00:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] previous article (JRuby — A Better Language for the Java Virtual Machine) discussed using JRuby as a better language for programming on the JVM, and used as an example a [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Dabbling in Clojure</title>
		<link>http://blog.bbs-software.com/index.php/2009/03/16/same-temperature-converter-different-language-clojure/</link>
		<pubDate>Mon, 16 Mar 2009 22:00:16 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=124</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Clojure</strong> (<a href="http://www.clojure.org">http://www.clojure.org</a>) is a Lisp implementation running on the Java Virtual Machine, written primarily by Rich Hickey and designed for simple and reliable concurrent programming. Clojure is a radical departure from the more conventional languages such as C, C++, Java, and Ruby.  As a functional language, using it requires a different outlook and thinking style.

Code written in Lisp or Clojure may appear to the uninitiated to be a confusing excess of parentheses and other seemingly cryptic text.  In fact, I used to be one of the multitude who dismissed these languages with a mere "too many parentheses" as a feeble rationalization.  However, after working with it for a bit I have instead come to view it with respect and even awe.

The Clojure community is a bright and helpful bunch; I often consulted them on the <em>#clojure</em> IRC channel, and the Google group at <a href="http://groups.google.com/group/clojure">http://groups.google.com/group/clojure</a> has had some very useful information as well.

The previous article (<a href="http://krbtech.wordpress.com/2009/02/26/jruby-a-better-language-for-the-java-virtual-machine/">JRuby — A Better Language for the Java Virtual Machine</a>) discussed using JRuby as a better language for programming on the JVM, and used as an example a Fahrenheit/Celsius temperature conversion Swing program.  I've ported this program to Clojure so that we can contrast Clojure with Java and JRuby using a known quantity.

Here is an image of the application's sole window.  There are text fields for entering the temperature, and buttons and menu items to perform the conversions, clear the text fields, and exit the program.

[caption id="attachment_13" align="aligncenter" width="499" caption="the temperature conversion Swing app window"]<img class="size-full wp-image-13" title="converter-window" src="http://www.bbs-software.com/blog/wp-content/uploads/2009/02/converter-window.png" alt="The Fahrenheit  Celsius temperature conversion Swing app window" width="499" height="148" />[/caption]

<!--more-->

The Git repository for this project is at <a href="http://github.com/keithrbennett/multilanguage-swing/tree/master">http://github.com/keithrbennett/multilanguage-swing/tree/master</a>.  You can get to the FrameInClojure.clj source file by clicking the <em>src</em> folder, and then clicking <em>FrameInClojure.clj</em>. It would probably help to have the program open in another window (or printed out) while reading this article.  

If you can access the REPL interactive Clojure command line, you can issue the following commands to run the example program and have access to the main-frame variable for inspection and manipulation:

[sourcecode lang="xml"]
(load-file &quot;FrameInClojure.clj&quot;)
(println temp-converter/main-frame)  ; illustrates access to the program's frame
(.setVisible temp-converter/main-frame false) ; illustrates that it can be manipulated
[/sourcecode]

The strengths of Clojure are many, and a Swing application is not the best program with which to showcase them.  Therefore, it would not be fair to judge Clojure based solely on the content of this article, because I am intentionally excluding its greatest strengths -- they are outside of the scope of porting this Swing application, and I am not yet expert enough to be qualified to teach about them.   However, this article <em>is</em> useful in illustrating some of the mechanics and philosophy of the language that can be used in general programming.

Firstly, Clojure (and, by extension, Lisp) struck me as a language that easily enables the writing of clear, concise, and logically structured code. I'm a big fan of this, as you will know if you have read my <a href="http://krbtech.wordpress.com/2008/11/28/applying-user-interface-design-to-source-code/">Applying User Interface Design to Source Code</a> article.

<h1>Let</h1>

For example, <em>let</em> (see <a href="http://clojure.org/special_forms#let">http://clojure.org/special_forms#let</a>) is a construct that formalizes the definition of terms and their scope.  Here's an example of a function that uses it:

[sourcecode lang="xml"]
(defn center-on-screen
&quot;Centers a component on the screen based on the screen dimensions
reported by the Java runtime.&quot;
[component]

  (let [
    screen-size   (.. Toolkit getDefaultToolkit getScreenSize)
    screen-width  (.getWidth screen-size)
    screen-height (.getHeight screen-size)
    comp-width    (.getWidth component)
    comp-height   (.getHeight component)
    new-x         (/ (- screen-width comp-width) 2)
    new-y         (/ (- screen-height comp-height) 2)]

    (.setLocation component new-x new-y))
  component)
[/sourcecode]

The let clause above leaves no doubt 1) that those terms are inaccessible outside of the let clause, and 2) that all terms are colocated at the beginning of the let clause.  The first feature is available in other languages such as Java, though it is (unfortunately) rarely used -- I'm speaking of nesting some of a method's code in curly braces without any enclosing for, if, do, or while, for the sole purpose of limiting the scope of the local variables used therein.

Variables in the let clause can use preceding variables, so it easily facilitates the use of intermediate variables for simplicity and clarity.  For example, the screen-width and screen-height variables above use the screen-size variable defined before them.

In the above function, the let clause is the only content of this function.  However, when this is not the case, and the function contains other code, the let clause clearly and cleanly displays for the writer a refactoring opportunity, namely the opportunity to extract the let clause into a function by itself.

<h1>Lambdas</h1>

As a functional language, the creation of a chunk of behavior that can be assigned to a variable (known as a lambda) is trivial.  Here are two ways to create a lambda that returns the square of its argument...

[sourcecode lang="xml"]
(def square1 (fn [n] (* n n)))
(def square2 #(* % %))
[/sourcecode]

... and here's an example of using a lambda concisely to guarantee uniform creation of two similar objects:

[sourcecode lang="xml"]
(let [
  create-an-inner-panel #(JPanel. (GridLayout. 0 1 5 5))
  label-panel           (create-an-inner-panel)
  text-field-panel      (create-an-inner-panel)
  ;; ...
[/sourcecode]

In the code above, a minimal lambda is created (the code between <em>#(</em> and <em>)</em>), and then used to create two panels immediately below.  In Java you would need to create a method to do this, probably either another instance method of the same class, or a static utility method of the same or another class. The Clojure approach is superior because a) the lambda's code is invisible outside of the function (and even the let clause) in which it is used, and b) it appears in the code immediately adjacent to its use.

<h1>Macros</h1>

Lisp and Clojure support macros that can greatly increase the power and flexibility of the language.  For example, I found a need for a function that lazily initializes an object.  In Java, it would have been:

[sourcecode lang="java"]
  private MyClass foo;

  public MyClass getFoo() {
    if (foo == null) {
      foo = new MyClass(); // or other way of initializing it
  }
  return foo;
}
[/sourcecode]

I coded the equivalent Clojure code, but (like the Java code) it smelled of verbosity, not to mention the redundancy when doing the same with several objects:

[sourcecode lang="xml"]
 (def fahr-text-field nil)

(defn get-fahr-text-field []
  (if fahr-text-field
    fahr-text-field
    (do
      (def fahr-text-field (create-a-text-field))
      fahr-text-field)))
[/sourcecode]

So I asked the folks on the #clojure IRC channel.  I was pointed to the _delay_ macro.  So using that, I could eliminate the need to define the variable, and do:

[sourcecode lang="xml"]
(def get-fahr-text-field
  (let [x (delay (create-a-text-field))]
    #(force x)))
[/sourcecode]

However, even that seemed like too much ceremony, so I asked them if there was a way to reduce that even further.  Minutes later, one of the generous IRC folks offered the following macro:

[sourcecode lang="xml"]
(defmacro lazy-init [f &amp; args]
  `(let [x# (delay (~f ~@args))]
#(force x#)))
[/sourcecode]

Using this macro, definitions of lazily initialized objects were as easy as:

[sourcecode lang="xml"]
(def get-fahr-text-field (lazy-init create-a-text-field))
[/sourcecode]

Seeing that, it struck me that Clojure enables writing code that's DRYer than that of any other language with which I've worked.  Through the use of macros, all the mechanics of the lazy initialization could be isolated down to two short, testable macros by an expert programmer or two, and then ignored by the rest of the world. Although I've done only a little Ruby metaprogramming, my sense is that Clojure's macros make it more powerful than Ruby in this respect. I invite you to discuss this in comments to this article; I for one would like to learn more about this.

As with JRuby, the Clojure implementation of SimpleDocumentListener is concise and straightforward:

[sourcecode lang="xml"]
(defn create-simple-document-listener
&quot;Returns a DocumentListener that performs the specified behavior
identically regardless of type of document change.&quot;
[behavior]

  (proxy [DocumentListener][]
    (changedUpdate [event] (behavior event))
    (insertUpdate  [event] (behavior event))
    (removeUpdate  [event] (behavior event))))
[/sourcecode]

Furthermore, the JRuby and Clojure implementations are superior to the Java implementation, because Java requires subclassing the SimpleDocumentListener for each type of behavior, and JRuby and Clojure do not.  Not only does this reduce class clutter, it is conceptually simpler since the behavior is the only variable.

<h1>Unnamed Arguments</h1>

Note the underscore below:

[sourcecode lang="xml"]
(def clear-action (create-action &quot;Clear&quot;
  (fn [_]
    (.setText (get-fahr-text-field) &quot;&quot;)
    (.setText (get-cels-text-field) &quot;&quot;))
;; ...
[/sourcecode]

All Swing Action implementations must include an <em>actionPerformed</em> function that takes a single ActionEvent parameter.  However, in many cases, access to that event parameter is not needed.  In Clojure, the underscore is used idiomatically to indicate that the argument it identifies is not subsequently used.  Although it is a legal identifier, its unique appearance stands out, so it is effective in communicating that it has a special meaning.   Interestingly, this feature is available in C++ by specifying the data type without a variable name, but to my knowledge was never implemented in the Java language.  The underscore is a valid identifier in Java, so there is nothing preventing using it as a convention.  However, Java does not support using the same identifier for more than one parameter, so one would have to kludge it, for example by naming them <em>_0</em>, <em>_1</em>, etc.

<h1>Different Meaning of Parentheses</h1>

One thing that threw me off several times while learning Clojure was the need to unlearn the idea that redundant parentheses were benign.  In Clojure, wrapping an expression in parentheses means 'call the function that is the first expression, and pass the rest of the expressions, if any, as parameters'.

Therefore, unlike the other languages with which I've worked, <em>3</em> does not evaluate to the same value as <em>(3)</em>, as evidenced by REPL's responses below:

[sourcecode lang="xml"]
user=&gt; 3
3
user=&gt; (3)
java.lang.ClassCastException: java.lang.Integer cannot be cast to clojure.lang.IFn (NO_SOURCE_FILE:0)
[/sourcecode]

<h1>Conclusion</h1>

I hope this article has been of interest to you.  Learning Clojure has been a fascinating experience to me, stretching my brain in ways it had never been stretched before.  I've mentioned here some things that have caught my interest along the way.  However, I want to reiterate that Clojure is a very powerful language, and I have truly only skimmed the very top here.  If you are interested in learning more, you can visit the sites listed above.  There is also an excellent book by Stuart Halloway called "Programming Clojure" at <a href="http://pragprog.com/titles/shcloj/programming-clojure">http://pragprog.com/titles/shcloj/programming-clojure.</a>  At the time of this writing, it is only available as a beta PDF, but is an excellent learning resource.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date><![CDATA[2009-03-16 17:00:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-03-16 22:00:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[same-temperature-converter-different-language-clojure]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[clojure]]></category>
		<category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
		<category domain="post_tag" nicename="jvm"><![CDATA[jvm]]></category>
		<category domain="post_tag" nicename="swing"><![CDATA[swing]]></category>
		<category domain="post_tag" nicename="temperature-converter"><![CDATA[temperature converter]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Jarkko Oranen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jarkko.oranen@ihme.org]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[94.237.78.58]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-17 10:41:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-17 15:41:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Firstly, just to clarify, in Clojure, an underscore is actually a valid symbol. Its use as an "ignored parameter" marker is purely a convention. At least for now.

Thank you for this article. You managed to highlight many of Clojure's interesting features in a succinct manner. This is the kind of article that encourages previously Clojure-ignorant readers to try the language.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.114.50.124]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-17 14:46:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-17 19:46:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jarkko -

You're absolutely right, thanks for pointing it out.  I've updated the article accordingly.

Kiitos!

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Raoul Duke]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[raould@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[75.101.5.14]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-18 23:45:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-19 04:45:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[great article! you are doing a good service, getting the word out on alternatives to stinky java syntax. :-)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Bob Foster]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bob@objfac.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[148.87.1.167]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-31 05:15:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-31 10:15:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I liked this article a lot! This is some fine technical writing, with well-chosen examples. I'm not sure liking a writer is transitive, but I'm going to buy Halloway's book on the strength of your recommendation.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Clojure: A few things I&#8217;ve been tripping up on at Mark Needham]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.markhneedham.com/blog/2009/11/20/clojure-a-few-things-ive-been-tripping-up-on/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[194.154.164.100]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-19 22:12:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-20 03:12:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Much like Keith Bennett I&#39;m not used to parentheses playing such an important role in the way that an expression gets evaluated. [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Neill Alexander]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[neillalexander@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.maybetechnology.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[94.194.63.99]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-23 08:49:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-23 13:49:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article Keith. I've just started to learn Clojure using the Stuart Halloway book, so was interested to read of your experiences.

One point - when working through your example I had to fully qualify the reference to main-frame like so:

user=&gt; (println temp-converter/main-frame)
user=&gt; (.setVisible temp-converter/main-frame false)

This was with Clojure 1.1.0-rc1. Not sure if that's because of my setup on Ubuntu or a change to REPL or something else.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.1.16.103]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-03-17 18:48:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-03-17 23:48:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Neill -

You're absolutely right,  I must have added the namespace after writing the sample code.

I've edited the article to make your corrections.

My profuse apologies for the delay, and thanks again!

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>11</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1300405690]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300405690.5691";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:13:"keithrbennett";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[99 Problems and Clojure ain&#8217;t one of them? | Tacitcogito&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://tacitcogito.wordpress.com/2011/08/09/99-problems-and-clojure-aint-one-of-them/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.151.210.16]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-08-09 18:48:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-08-09 23:48:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://aperiodic.net/phil/scala/s-99/ http://krbtech.wordpress.com/2009/03/16/same-temperature-converter-different-language-clojure/ [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312933695.6686";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1312935060]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312935061.0422";s:7:"message";s:52:"keithrbennett changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"keithrbennett";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>The Loss of One&#039;s Adopted Country - Another Result of the Economic Crisis</title>
		<link>http://blog.bbs-software.com/index.php/2009/03/30/the-loss-of-ones-adopted-country-another-result-of-the-economic-crisis/</link>
		<pubDate>Mon, 30 Mar 2009 18:20:33 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[At a recent technical meeting I met a colleague with whom I've spoken from time to time.  He is from India and has been working on an H-1 visa after getting his Masters degree at a state university here in the U.S.  He, his wife, and his children have been here together for thirteen years, and consider this country their home.

Now, because of the economic crisis, he is having a hard time finding work to keep his visa active.  He told me that if he cannot find work within a couple of weeks, he will have to return to India.  This would be a huge, sudden, and unwelcome upheaval for his family.

It struck me that this is an a side of the economic crisis that has not been discussed much.  While many of us are suffering in other ways, very few of us risk losing our adopted country.  And, while one could argue that, as a guest worker, he should have known that his welcome might end, is he really more guilty of unrealistic optimism (or, as Alan Greenspan put it, irrational exuberance) than the rest of us?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2009-03-30 13:20:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-03-30 18:20:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-loss-of-ones-adopted-country-another-result-of-the-economic-crisis]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[The Loss of One’s Adopted Country - Another Result of the Economic Crisis &laquo; Keith R. Bennett&#8217;s Weblog]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://keithrbennett.wordpress.com/2009/03/30/the-loss-of-one%e2%80%99s-adopted-country-another-result-of-the-economic-crisis/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.233.96.139]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-30 13:25:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-30 18:25:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] March 2009 by keithrbennett    I posted this article on my technical blog, but it is applicable here as well. If you&#8217;re interested, feel free to give it a read. I [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[David]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[david.medinets@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[65.222.202.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-01 09:03:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-01 14:03:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why is he still working under an H1 visa after 13 years? That seems totally wrong to me. I have no doubt that your colleague is a fine person but what the hell? I thought that H-1 visas were for five years.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.34.119.129]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-01 18:34:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-01 23:34:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[David -

I asked him about it, and his response was "3 years of education, lost 4+ years with a company during green card process, then restarted...green card process as visa extension."

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Bob Foster]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bob@objfac.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[148.87.1.167]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-31 05:18:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-31 10:18:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had the same reaction as David. I know people who've gotten their green cards and become citizens in much less time. But here he is. Suggest he apply to Oracle, which is still hiring and has loads of H1B employees.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>GPartEd - Free and Open Source Disk Partitioner</title>
		<link>http://blog.bbs-software.com/index.php/2009/07/01/gparted-free-and-open-source-disk-partitioner/</link>
		<pubDate>Wed, 01 Jul 2009 18:18:50 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=197</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://gparted.sourceforge.net/screens/gparted_1_big.png" alt="GPartEd Main Window" />

GPartEd (<a href="http://gparted.sourceforge.net">http://gparted.sourceforge.net</a>) is a free and open source software tool that does disk partitioning like its commercial counterpart, PartitionMagic.  Although GPartEd is cursed with a boring name, it is nevertheless a superstar product with both looks <em>and</em> brains. (For the looks, see <a href="http://gparted.sourceforge.net/screenshots.php">http://gparted.sourceforge.net/screenshots.php</a>.) The name <em>GPartEd</em> is an abbreviation for Gnome Partition Editor.

Although I have not done any thorough or systematic comparison of GPartEd and PartitionMagic, I <em>can</em> say that I have successfully used GPartEd for some nontrivial partition schemes, and it worked beautifully.

GPartEd runs natively on Linux, but if you are using other operating systems such as Windows or OS X, you can put it on a bootable medium such as a CD or USB drive and boot from that medium. More information on this is at <a href="http://gparted.sourceforge.net/livecd.php">http://gparted.sourceforge.net/livecd.php</a>.

<!--more-->

When the bootable medium starts up, it boots Linux, but you don't need to care about that -- it's got an attractive and intuitive GUI. It's aware of a multitude of partition types, including types used by Windows, OS X, Linux, and Solaris, so it's not likely that the one you want will be missing. You can see all the supported partition types at <a href="http://gparted.sourceforge.net/features.php">http://gparted.sourceforge.net/features.php</a>.

<h3>Using GPartEd to Add an Operating System to Your Drive</h3>

My recent need for GPartEd was to add Linux to a Windows laptop. The result is that I'm writing this on that laptop, running Ubuntu Linux 9.04.  The laptop's hard drive came with a single huge Windows partition and a small recovery partition.  Using GPartEd, I shrunk the Windows partition and created several ext4 and swap partitions for the Linux install.

The Ubuntu installation  writes the Grub boot loader to the boot sector of your drive.  When your system starts up, Grub presents a menu, and you can select which operating system you would like to boot.

Although I used it to have Linux and Windows share the same drive, you could have any combination of operating systems.  This could be a way to try out a new OS (e.g. Windows 7 or a new Linux distro) without totally committing to it. Since Macs are now Intel based, GPartEd should work fine on a Mac, and you could boot OS X, Linux, or Windows from different partitions on the same drive. The only caveat is that you need to install a boot loader to enable you to select which OS to load when the system boots up.  Most Linux installations will do this for you automatically.

Another handy use of GPartEd is to create a partition for data that can be shared by multiple OS's on the drive.  For example, you may have documents, photos, and/or music files that you want to access regardless of which OS you boot.  All you need to do is to create the partition in a format recognized by all the OS's on your system.  I use fat32 for this. 	

GPartEd is just one of a multitude of free open source software products that can make our technical lives easier -- and cheaper. Kudos to the developers and other contributors that made it possible.

Feel free to comment with any feedback or experiences.

- Keith
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date><![CDATA[2009-07-01 13:18:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-07-01 18:18:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gparted-free-and-open-source-disk-partitioner]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gnome"><![CDATA[gnome]]></category>
		<category domain="post_tag" nicename="gparted"><![CDATA[gparted]]></category>
		<category domain="post_tag" nicename="partition-editor"><![CDATA[partition editor]]></category>
		<category domain="post_tag" nicename="partition-magic"><![CDATA[partition magic]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[Keith Bennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://krbtech.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.34.119.129]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-03 10:11:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-03 15:11:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Warning to HP Pavilion Users:

As of the time of this writing, the current stable release of GPartEd is 0.4.5-2.  

There is a warning on http://gparted.sourceforge.net/livecd.php that says:

///WARNING/// Due to a hardware/firmware bug, it's _NOT_ recommended to run GParted live on some types of HP Pavilion machines. Otherwise your VGA card fan might be dead. For more info, please refer to this bug report.

(Bug report link is on the page whose URL is listed above.)

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[Keith Bennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://krbtech.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.34.119.129]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-01 12:03:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-01 17:03:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just found out about PartEdMagic, which includes GPartEd and some other useful tools.  I haven't checked it out yet, but if you're going to go to the trouble to create a CD, it seems like it would make sense to do it with PartEdMagic instead.  Here's their web site:

http://partedmagic.com/

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[Kirk Kalvar]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kkalvar@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.83.153.7]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-02 20:44:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-03 01:44:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Keith, I've actually looked at this before I think.  Not sure what I ended up using.  Looks like a good utility.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[Keith Bennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://krbtech.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[75.196.162.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-07 16:33:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-07 21:33:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just experienced the first failure with GPartEd.  I was modifying the partitions of a new Dell laptop.  There was a failure along the way, and when I rebooted, the boot sector was hosed, and the partition information was lost, so I could not boot to the operating system originally installed.  The recovery partition was also unavailable.

There's probably a simple way to restore a boot partition, but I don't know offhand what that is.

In any case, I was not very enamored of that laptop.  Fortunately I had purchased it from Costco.  Costco allows you to return a computer within 90 days of purchase for a full refund (even the shipping charges) for any reason.

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Bangspace -- Bangkok Hackerspace</title>
		<link>http://blog.bbs-software.com/index.php/2010/03/02/bangspace-bangkok-hackerspace/</link>
		<pubDate>Tue, 02 Mar 2010 18:58:27 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[One of the manifestations of community among IT professionals and enthusiasts is the <em>hackerspace</em> (see Wikipedia article at <a href="http://en.wikipedia.org/wiki/Hackerspace">http://en.wikipedia.org/wiki/Hackerspace</a>). A hackerspace is a place where hackers (in the loose sense of the word, that is, benevolent software and hardware enthusiasts) can meet to talk, learn, and work together.

A recent addition to the hackerspaces of the world is Bangspace in Bangkok, Thailand. Bangspace is a modest room on the fifth floor of a small walkup office building near the Ekkamai Skytrain station. The office building is occupied by Proteus Technologies (<a href="http://proteus-tech.com/">http://proteus-tech.com/</a>), whose owner, Ben Scherrey, is an American member of Bangspace who has donated use of the space.


[caption id="attachment_241" align="aligncenter" width="544" caption="Bangspace Street View"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/bangspace-front1.jpg"><img src="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/bangspace-front1.jpg" alt="Bangspace Street View" title="Bangspace Street View" width="544" height="408" class="size-full wp-image-241" /></a>[/caption]

<!--more-->
<br>

[caption id="attachment_243" align="aligncenter" width="544" caption="Bangspace Front Door"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/bangspace-door2.jpg"><img src="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/bangspace-door2.jpg" alt="Bangspace Front Door" title="Bangspace Front Door" width="544" height="742" class="size-full wp-image-243" /></a>[/caption]

Bangspace is a bit of a pun; on the one hand, it is an abbreviation for Bangkok Hackerspace, and on the other hand, it describes a two character string containing bang (“!”) and space (“ “). Since a space is difficult to display (indeed, it is invisible), an underscore is sometimes used. So you might see Bangspace expressed as <em>!_</em>.


Meetings are usually 8:00 PM to midnight or so. Currently, Monday is Drupal night, Tuesday is Android night, and Wednesday is Hardware Hacking night. Every other week is Beercamp, which is a general social evening including, in addition to the human attendees, beer. Unfortunately for me, my time in Bangkok did not include one of these days, so I never got to experience Beercamp.


Bangspace has a membership fee of 500 baht (about $15 US) per month, but you don't have to join to participate. Ben elaborates: "You don't have to be a member to participate in !_ but you do have to have a member there willing to be "responsible" for you. Membership gets you a key and voting rights as to what to do when we decide money issues or other things requiring consensus. People join !_ because they want to support it."

Getting to know the Bangspace folks was one of the major highlights of my stay in Bangkok. Others were:

<ul>

<li>teaching a Ruby class (slides at (<a href="http://www.slideshare.net/keithrbennett/what-i-love-about-ruby">http://www.slideshare.net/keithrbennett/what-i-love-about-ruby</a>) at the Asian Institute of Technology (<a href="http://www.ait.ac.th/">http://www.ait.ac.th/</a>)</li>

<li>getting to know Chokchai (my host at AIT), and</li>

<li>attending the first TED conference in Thailand (<a href="http://www.tedxbkk.com/http://www.tedxbkk.com/">http://www.tedxbkk.com/</a>).</li>
</ul>


The Bangspace folks are a diverse and friendly lot, including Thais, Germans, French, Japanese, South Africans, Indians, Americans, and others. They are software developers, graphic artists, entrepreneurs, and more.


Meetings are very informal, with people coming and going any time they feel like it. Sometimes the theme of the meeting is in name only – last night was Android night but we did very little that was Android-related. Nevertheless we all seemed to enjoy the evening. Jean Jordaan, a South African Python and Plone developer working on UN-funded project web sites, found out that he could install Python on his Android phone.  Thirty seconds later, he showed me the Python shell on it. The geek in me got excited to see it and before I knew it a “Yeah baby!” leapt out of my mouth...to which Jean jokingly replied “<em>That'll</em> impress the girls”...hmmm, I wonder if he was referring to the Python shell, or my exclamation. ;)


A few minutes later, Jean showed me a bug he encountered running Python on the phone. We looked into it further, and found that it was most likely a bug in the Android Scripting Environment. We didn’t find it in the issue tracker, so he’s going to submit it.


At last Tuesday’s Android session, Adam showed us the Android app he is working on while learning Android. Sugree then made a late appearance and stole the show, sharing with us his formidable expertise and experience with Android. Sugree (<a href="http://sugree.com/self">http://sugree.com/self</a>) is rather famous in the Thailand technical community. He is an expert in many areas. After working with Android in his spare time for just a few months, he taught it like a pro. The next day I read an article in the Bangkok Post in which Sugree was quoted; obviously the press views him with similar respect. One of Sugree’s distinctions is that of the most prolific tweeter in Thailand, and probably in the world, with 544,111 tweets as of February 4, 2010.

[caption id="attachment_255" align="aligncenter" width="544" caption="Sugree teaching Android at Bangspace"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/bangspace-sugree-android-talk2.jpg"><img src="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/bangspace-sugree-android-talk2.jpg" alt="Sugree teaching Android at Bangspace" title="bangspace-sugree-android-talk" width="544" height="370" class="size-full wp-image-255" /></a>[/caption]

Bangspace's online discussions are in the !space Google group at <a href="http://groups.google.com/group/bangkok-space">http://groups.google.com/group/bangkok-space</a>.  Here's an excerpt about Sugree:


----


31o5: He [Sugree] is one of the most popular hacker and tweeple in Thailand I guess,
surprising that his tweets are not auto or bot, he is a human being :)


jfxberns: I think that's an interesting hypothesis, Satoko. I suggest we do
tests on Sugree to see if he really is Human.


31o5: is actually sugree human? could be very well designed humanoid....
good for our electronics hacking.


----


I wonder if Sugree will show up at electronics hacking night now...



* * * *


We also had a visit from Nicholas of Singapore who is an investor in technology companies. As I hear it, the Singapore hackerspace is the envy of developers throughout Asia. Perhaps someone can blog or add a comment to this article about it?

About 11:00 or so we started talking about workplace environments, contrasting those of Germany (represented by Jan) and Sweden (represented by Adam) with that of the United States (represented by me). They represent opposite extremes – employers in most U.S. states have a lot of power over their employees, whereas in their countries the employees reign. The problem with the latter is that it stifles entrepreneurship – many who would start businesses in the U.S. would not dare to in Germany or Sweden for fear of not being able to adjust their workforce (i.e. fire a problem or nonperforming worker) if necessary. We all agreed that the optimal solution is a balance of the two.

[caption id="attachment_250" align="aligncenter" width="544" caption="Jan at Bangspace"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/jan1.jpg"><img src="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/jan1.jpg" alt="Jan at Bangspace" title="Jan at Bangspace" width="544" height="504" class="size-full wp-image-250" /></a>[/caption]

[caption id="attachment_247" align="aligncenter" width="544" caption="Amp and Adam at Bangspace"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/em-and-adam.jpg"><img src="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/em-and-adam.jpg" alt="Amp and Adam at Bangspace" title="Amp and Adam at Bangspace" width="544" height="408" class="size-full wp-image-247" /></a>[/caption]

On Saturday I posted an invitation to collaborate on working with Android. Adam responded, and together we worked on refactoring an Android app he’s been writing. There was nobody around with a key to the Bangspace office, so Satoko, a Japanese entrepreneur doing graphic design work for clients in Japan and Thailand (see <a href="http://mozo.in.th/">http://mozo.in.th/</a>), invited us to join her at her office, which is at a convenient location near the Asok Skytrain station. It's a comfortable office with air conditioning and Internet connectivity.  Sweet!  One of Satoko’s contributions to Bangspace is the all important responsibility of stocking the fridge with beer, soda, and bottled water, to enable us to endure the long hacking hours in a hydrated (or, alternatively, mildly inebriated) state. There’s a charge for the drinks that includes a modest profit; this helps support Bangspace.

What started as a casual invitation to get dinner together that evening turned into a great time. Satoko suggested a Chinese restaurant near her office that was awesome. She, Adam, Sajal and I are from four different countries on three different continents, and the conversation was truly enriched by that diversity. We stayed there for what seemed like hours, leaving only when the restaurant started closing.


After dinner, Satoko mentioned she was going to get a 100 baht ($3.00) one hour Thai massage, and agreed to let me tag along. It was the kind of place where you leave your shoes outside the door. After we left, I felt something strange in my shoe and figured I'd better stop and remove it. As soon as I took the shoe off and put it on the ground, a frog jumped out!


What do the dinner, the massage, and the frog have to do with Bangspace? Not very much, directly at least – but it does illustrate that the initial connections made from technical community are seeds from which other experiences can sprout and multiply. My time at Bangspace was less than two weeks, and even so, I have made friends and connections that will likely last a very long time.  Put differently, although creating community requires time, energy, and sometimes money, we should never lose sight of the resulting benefits that make it a very wise investment.

I wish I could continue to hang out with the Bangspace folks, but other adventures beckon. I have returned to Chiang Mai today to continue massage school for another week before returning to the States next week.


- Keith Bennett

[caption id="attachment_290" align="aligncenter" width="544" caption="Gratuitous photo of author with tiger.  The tiger's name is Kao Nio (Sticky Rice) and lives at Tiger Kingdom in Mae Rim, Thailand."]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/keith-with-tiger.jpg"><img src="http://www.bbs-software.com/blog/wp-content/uploads/2010/02/keith-with-tiger.jpg" alt="Keith with Tiger" title="keith-with-tiger" width="544" height="365" class="size-full wp-image-290" /></a>[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2010-03-02 13:58:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-02 18:58:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bangspace-bangkok-hackerspace]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bangkok"><![CDATA[bangkok]]></category>
		<category domain="post_tag" nicename="bangspace"><![CDATA[bangspace]]></category>
		<category domain="post_tag" nicename="hackerspace"><![CDATA[hackerspace]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[David]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[david.medinets@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[199.221.15.225]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-03 10:46:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-03 15:46:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Impressive. Nice story.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Greene]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[msdn64@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.83.125.115]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-04 17:57:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-04 22:57:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Keith - would you be interested in helping me get started with Ruby? Thanks.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[nattyait]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nattanicha@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://nattyait.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[110.77.145.40]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-22 02:51:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-22 07:51:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, Keith. It's Natty (the girl from narisa.com, who was at South Thailand and could not attend ruby's meeting). I just know that you blogged about bangspace here. Now I'm working at Proteus Tech. Moreover, I was working on android project with MOZO and Adam. Unfortunately, I was not there yet when you took these photos. I have started working on this project on March 2, 2010 which is the day you blogged this article. ^_^

Just want to visit your blog and say hello!! Chokchai told me that you have been here. It's surprised me a lot!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.34.119.129]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-22 07:35:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-22 12:35:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Steve -

What kind of help do you need? I could answer questions from time to time (if I know the answer, not a given).  There are excellent resources on the web and in other online technical community resources.  I suggest checking out RubyLang.org  (<a href="http://www.ruby-lang.org/en/" rel="nofollow">http://www.ruby-lang.org/en/</a>), and, in particular, researching the resources of the Ruby community (<a href="http://www.ruby-lang.org/en/community/" rel="nofollow">http://www.ruby-lang.org/en/community/</a>).  You'd getter prompter and higher quality assistance that way. ;)

Cheers,
Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>23</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.34.119.129]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-22 07:53:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-22 12:53:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, Natty.  On March 2nd I was already back at massage school in Chiang Mai.  I'm sorry I missed you and Ben.

My time with all you bright and friendly folks at Bangspace was a lot of fun, and wish I could have spent more time there. The Bangspace community is an example for other technical communities all over the world to follow.  My brief time with Chokchai at AIT was also memorable, and it would be great to spend more time there someday too.

I just got myself a Droid, and may be diving into the world of Android development.  It would be cool if we all worked together somehow.  Except that I might be coding my Android apps in Clojure. ;)

I just returned from Thailand a couple of weeks ago, and am already looking forward to my next visit (possibly next February).

Cheers...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>24</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Sun Java Coding Conventions Revisited</title>
		<link>http://blog.bbs-software.com/index.php/2010/03/06/sun-java-coding-conventions-revisited/</link>
		<pubDate>Sat, 06 Mar 2010 21:10:16 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=300</guid>
		<description></description>
		<content:encoded><![CDATA[The Sun Java Code Conventions document, written in 1997, and available at <a href="http://java.sun.com/docs/codeconv/">http://java.sun.com/docs/codeconv/</a>, continues to be a valuable resource for Java programmers. In addition to the nuts and bolts of formatting and the like, it includes some great wisdom, such as:

<em>The frequency of comments sometimes reflects poor quality of code. When you feel compelled to add a comment, consider rewriting the code to make it clearer.
</em>

I've recently been asked to participate on a committee that will come up with a set of coding standards. These standards will be used by several teams, so it's especially important that they be good and not overly restrictive. The Sun conventions are a reasonable place we may start. On the whole, I think they're great, but I do have some reservations about a few points. Below are some notes regarding the Sun conventions, listed by section in the original document to which they refer. Quotes from the Sun document are indicated in italics, except for source code. I invite your feedback. This article may be modified based on your comments or my own "clearer thinking and better information".

<!--more-->

<hr />

<strong>3.1.1 Beginning Comments</strong>

<em>All source files should begin with a c-style comment that lists the programmer(s), the date, a
copyright notice, and also a brief description of the purpose of the program. For example:
</em>
<code>/*
* Classname
*
* Version info
*
* Copyright notice
*/</code>

Although the paragraph mentions a date, the code refers to a version. In any case, regarding the inclusion of either one in the source code, I believe this should be flexible, taking into account team practices. On most projects I've worked on in recent years, this inclusion has not been necessary, and requiring it would have been a burden and would have degraded the signal to noise ratio of the code.

In addition, including version information usually embeds dependency on a specific version control system in the source code, and thereby increases the cost of switching version control systems. Even worse is manual modification of version numbers, which is highly error prone (I hope no one actually does this). In my experience in recent years, source code is rarely printed, and developers rarely have confusion over whether they are working on the head of the trunk or some other version. In the unusual case that the developer has any confusion about the version number, he/she can consult the IDE or version control system.

Regarding the author information (which is included in the paragraph but not the example code), I have mixed feelings about that. It's nice to know who to consult, but on the other hand, it's a very rough and potentially outdated piece of information. Much more information can be found, quite easily, by doing a version control annotate. Also, these author comments are biased toward the original author. Does anyone have any hard and fast rules about at what point a new author should be added? It may be done inconsistently within a team, or over time. So the author information included in the header may not be as accurate as it seems.

<hr />

<strong>4. Indentation
</strong>
I suggest spaces, never tab characters; the tab setting of 8 is in that case irrelevant. On the other hand, if there is any possibility of a tab character sneaking in, I'd suggest setting tab width to 4.

<hr />

<strong>4.1. Line Length
</strong>
The line length limit of 80 is an anachronism, a relic of text mode terminals and days gone by when printing source code was common. These days, though, it is no longer practical. Source code is rarely printed, lines are longer, and a short line maximum means more line continuations, which means code that is less readable. There should be a maximum, but it should be higher than 80. It should take into account typical use cases of developers (e.g. screen size/resolution and window width), but also accommodate less common cases (e.g. developers who use larger font sizes due to vision issues).

<hr />

<strong>6.2 Placement [of Declarations], 6.3 Initialization
</strong>
<em>Put declarations only at the beginning of blocks.
</em>
I disagree with this. I think putting a declaration as close as possible to (before) its use:
<ul>
	<li>communicates more information to the reader, that is, that the variable is not used above the declaration;</li>
	<li>is an indicator to the developer that there may be an opportunity or a need to extract the inner code into its own method; and</li>
	<li>makes that extraction simpler to accomplish.</li>
</ul>

<hr />

<strong>7.5 For Statements, 7.6 While Statements
</strong>
<em>An empty for statement (one in which all the work is done in the initialization, condition, and update clauses) should have the following form:
</em>
<code> for (initialization; condition; update);</code>

I disagree; I believe the semicolon should be on the following line, or empty braces used:

<code>
for (initialization; condition; update)
....;
</code>
<code>
for (initialization; condition; update) {
}
</code>

This communicates the bounds of the for statement far more clearly; the other way, lines following the one line <em>for</em> statement can easily be confused as belonging to the loop.

The same applies to while loops.

<hr />

<strong>7.8 Switch Statements
</strong>

<em>A switch statement should have the following form:
</em>

<code>
switch (condition) {
case ABC:
....statements;
..../* falls through */
case DEF:
....statements;
....break;
default:
....statements;
....break;
}
</code>
I think indenting the case relative to the switch should also be permitted:

<code>switch(something) {
....case FOO:
........do_something();
</code>

This makes it easier to visually locate the beginning of the switch statement.

<hr />

<strong>8.1 Blank Lines
</strong>

<em>One blank line should always be used in the following circumstances:
</em>
<ul>
	<li><em>Between methods</em></li>
</ul>
The Sun coding conventions were written at a time when it was still not uncommon to print source files. Now, however, source files are rarely printed. The interest of legibility no longer needs to be tempered by the need for economy of vertical whitespace.

I suggest permitting (or even suggesting) two blank lines as method separators. This more clearly communicates that the degree of distinction between the methods exceeds the degree of distinction between sections of a method.

<hr />

<strong>9. Naming Conventions
</strong>

<em>Variable names should be short yet meaningful.
</em>
I'd like to add:

"In cases where making a variable name longer eliminates the need for an explanatory comment, this guideline may be relaxed somewhat."

<hr />

<strong>10.5.4 Special Comments
</strong>

<em>Use XXX in a comment to flag something that is bogus but works. Use FIXME to flag something
that is bogus and broken.
</em>

I think "KLUDGE" is more expressive and universal than "XXX". "KLUDGE" can successfully be looked up on Google. "XXX" can be also, but you wouldn't find anything about software. ;)

<strong>11.1 Java Source Code Example
</strong>

<em>The following example shows how to format a Java source file containing a single public class.</em>
<code>/*
* %W% %E% Firstname Lastname
//...</code>

The tokens are probably meant for substitution by a version control system. I suggest <em>not</em> putting anything in source code that is version control system specific, unless the benefits are huge. Most of us are using old version control systems, and it would be nice to keep the cost of upgrading to a better one low. Sun may not have been suggesting the use of these tokens, but I think it might be helpful to explicitly caution the reader about the downside of doing so.

<hr />

That's what I think, but my beliefs are a function of my finite knowledge and experience. There may be other ways of viewing these issues. What do <em>you</em> think?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date><![CDATA[2010-03-06 16:10:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-06 21:10:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sun-java-coding-conventions-revisited]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-conventions"><![CDATA[code conventions]]></category>
		<category domain="post_tag" nicename="code-standards"><![CDATA[code standards]]></category>
		<category domain="post_tag" nicename="coding-conventions"><![CDATA[coding conventions]]></category>
		<category domain="post_tag" nicename="coding-standards"><![CDATA[coding standards]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="sun"><![CDATA[sun]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[email_notification]]></wp:meta_key>
			<wp:meta_value><![CDATA[1267909820]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_fb]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[Charles Calvert]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[charles.calvert@celticwolf.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.celticwolf.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[66.15.92.209]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-12 19:36:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-13 00:36:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I take the opposite approach to indentation: use tabs, not spaces.  Each tab character is a level of indentation.  My reason for using tabs is this: Many programmers have different preferences when it comes to the number of character positions to indent a block.  If you use tabs to indent, you can configure your editor to represent that tab as N spaces.  I can have my editor show 4 character positions, while Jack can have his show 2.  Note that I said "represent", not "convert".  The tab remains unchanged in the file on disk; the editor only displays it as N spaces visually.

Conversely, I've never heard a logical argument for using spaces.  I frequently hear the justification that some editors don't expand tabs correctly, but I've never actually found one that exhibits that misbehavior.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1276391946]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[purencool]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[purencool@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.purencool.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[210.1.208.129]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-02-04 23:37:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-02-05 04:37:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks I need these reminders. Using the Java convention is of great advantage to any development.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1296880678.1464";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1300405323]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1300405323.283";s:7:"message";s:52:"keithrbennett changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"keithrbennett";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Singapore and Its Red Dot RubyConf</title>
		<link>http://blog.bbs-software.com/index.php/2011/05/10/singapore-and-its-red-dot-rubyconf/</link>
		<pubDate>Tue, 10 May 2011 06:45:56 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=388</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>The Conference</h2>
On April 22-23, 2011 was the first ever regional Ruby Conference in Southeast Asia (<a title="Red Dot RubyConf" href="http://reddotrubyconf.com/">http://reddotrubyconf.com</a>, Twitter tag #<em>reddotrubyconf</em>).  (Conference links and resources provided by @cheeaun are <a href="https://docs.google.com/document/pub?id=1aWZqJVeTk1T7Ll2SeHchKM8X8Dj7L3kXkWMXb4lBPys&amp;pli=1" title="RedDotRubyConf Links">here</a>). It was really cool seeing people from so many different countries in the region unite around their appreciation of the Ruby language.

In additional to the regional speakers and participants, Matz (the creator of the Ruby language, for those who don't know) made the trip from Japan, as did Dave Thomas, Tom Preston-Warner, Gregg Pollack, Sarah Mei, and yours truly from the United States for this historic (in the Ruby world, anyway) occasion. Matz handles his celebrity well, and didn't mind when a few of us asked him for photos with him.
<table>
<tbody>
<tr>
<td>

[caption id="attachment_389" align="alignright" width="300" caption="Matz with Paolo Falcone from Friendster Philippines"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/matz_and_paolo.jpg"><img class="size-medium wp-image-389" title="Matz and Paolo Falcone" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/matz_and_paolo.jpg?w=300" alt="Matz and Paolo Falcone from Friendster Philippines" width="300" height="225" /></a>[/caption]</td>
<td>

[caption id="attachment_426" align="alignnone" width="300" caption="Matz and Me (Keith Bennett)"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/matz_and_keith.jpg"><img class="size-medium wp-image-426" title="Matz and Me (Keith Bennett)" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/matz_and_keith.jpg?w=300" alt="Matz and Me (Keith Bennett)" width="300" height="225" /></a>[/caption]</td>
</tr>
</tbody>
</table>

<!--more-->

[caption id="attachment_390" align="alignright" width="300" caption="SMU (Singapore Management University), RedDotRubyConf Site"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/smu.jpg"><img class="size-medium wp-image-390" title="SMU (Singapore Management University), RedDotRubyConf Site" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/smu.jpg?w=300" alt="SMU (Singapore Management University), RedDotRubyConf Site" width="300" height="225" /></a>[/caption]

The conference was held at SMU, Singapore Management University, on their beautiful campus in the middle of the city. It was a one track conference, with sessions held in a comfortable and spacious auditorium.

Pivotal Labs is, well, pivotal, in Singapore's Ruby community. They've invested time and money in events such as the conference and provide a lot of technical expertise in the community. (Carl Coryell-Martin (<a title="http://pivotallabs.com/users/ccoryell/blog" href="http://pivotallabs.com/users/ccoryell/blog">http://pivotallabs.com/users/ccoryell/blog</a>), head of Pivotal Labs Singapore, worked with Andy Croll of Anideo and Jason Ong to organize RedDotRubyConf.) Some of the Pivotal crew is working with Friendster in Manila for Friendster's new makeover. Pivotal employs an intense but humane work style, with only rare exceptions to colocation and almost continuous pair programming. They say that while their work day is generally limited to eight hours, it can be an exhausting eight hours. The Pivotal folks, as everyone else, were friendly and welcoming (MINSWAN - Matz is Nice So We Are Nice).

They hosted an evening Rails installfest the night before Thursday's Rails tutorial, and I stopped by to see if I could help. After sitting down, I turned to the person on my left, and it was Matz! I spared him the three bows and instead said a friendly hello.
<h3>Jason Ong</h3>
[caption id="attachment_391" align="alignright" width="300" caption="Keith Bennett (Me) with Jason Ong"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/keith_and_jason_ong.jpg"><img class="size-medium wp-image-391" title="Keith Bennett (Me) with Jason Ong" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/keith_and_jason_ong.jpg?w=300" alt="Keith Bennett (Me) with Jason Ong" width="300" height="225" /></a>[/caption]

I had been corresponding with Jason Ong, one of the principal organizers, for a while before the conference and was happy to finally meet him in person. Jason runs a Rails consultancy and is also a musician. He's quick to laugh, but thoughtful and serious too, caring a lot about Singapore and the world.

On one of my first days in Singapore, Jason brought me to a typical Singaporean Hainanese chicken joint. Hainanese chicken, he explained, is prepared by boiling the chicken and then immersing it in freezing cold water. This has a special effect on the fat that makes the chicken especially tender.
<h3>...and Andras Kristof</h3>
[caption id="attachment_392" align="alignright" width="225" caption="Andras Kristof of Viki.com"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/andras-e1305008011779.jpg"><img class="size-medium wp-image-392" title="Andras Kristof of Viki.com" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/andras-e1305008011779.jpg?w=225" alt="Andras Kristof of Viki.com" width="225" height="300" /></a>[/caption]

After dinner Jason and I went over to the Starbucks, where Andras Kristof happened to pass by. Andras is originally from Hungary, but has spent several years each in Japan and Singapore. The three of us chatted for a couple of hours. Andras is the Senior Director of Engineering for <a title="http://www.viki.com" href="http://www.viki.com">http://www.viki.com</a>, a unique and awesome web site where movies can be viewed with subtitles contributed by the users themselves in many languages (including Klingon!). He had intended to work on his upcoming conference talk, but decided he'd enjoy chatting more.

My US mobile phone is a Verizon phone, CDMA, not GSM, and is therefore unusable almost everywhere in the world outside the US. I have an old and simple GSM phone I use for my travels, but I felt I needed an Android phone so I could stay in constant email contact, and wander the cities of my travels more intelligently with GPS and Google Maps. So I asked Andras where I could find a cheap used Android phone, and he offered to give me an old phone he was no longer using! (I tried to pay him for it, but he refused.) It's a cute half size Motorola phone with a swing-out keyboard. The phone's been a great help and has gotten a lot of compliments. (The coin below is included for size context; it's a 10 Philippine peso coin and is about the size of a U.S. quarter.)
<table>
<tbody>
<tr>
<td>
[caption id="attachment_393" align="alignleft" width="240" caption="Andras&#039; Motorola Android Phone, Closed"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/moto-phone-closed.jpg"><img class="size-medium wp-image-393 " title="Andras' Motorola Android Phone, Closed" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/moto-phone-closed.jpg?w=300" alt="Andras' Motorola Android Phone, Closed" width="240" height="180" /></a>[/caption]</td>
<td>
[caption id="attachment_394" align="alignright" width="240" caption="Andras&#039; Motorola Android Phone, Opened"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/moto-phone-opened.jpg"><img class="size-medium wp-image-394 " title="Andras' Motorola Android Phone, Opened" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/moto-phone-opened.jpg?w=300" alt="Andras' Motorola Android Phone, Opened" width="240" height="180" /></a>[/caption]
</td>
</tr>
</tbody>
</table>
<h2>HackerspaceSG</h2>
While in Bangkok, I visited Bangkok Hackerspace (blog article at <a title="http://krbtech.wordpress.com/2010/03/02/bangspace-bangkok-hackerspace/" href="http://krbtech.wordpress.com/2010/03/02/bangspace-bangkok-hackerspace/">http://krbtech.wordpress.com/2010/03/02/bangspace-bangkok-hackerspace/</a>), and learned that the Singapore Hackerspace (<a title="http://hackerspace.sg" href="http://hackerspace.sg">http://hackerspace.sg</a>) was looked up to as a very cool space. As a result, I wanted to check it out, and finally, after the last day of the conference, Jay Fajardo and Jason Torres of <a title="http://www.proudcloud.net" href="http://www.proudcloud.net">http://www.proudcloud.net</a> in the Philippines joined me on an urban trek to the space.  We must have looked funny, stopping frequently to pore over the tiny phone to study the map and figure out where we were going.  Well, ok, <em>I</em> must have looked funny. 

[caption id="attachment_396" align="alignright" width="300" caption="Keith, Jay, and Jason at HackerspaceSG"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/sg-hackerspace-1.jpg"><img class="size-medium wp-image-396" title="Keith, Jay, and Jason at HackerspaceSG" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/sg-hackerspace-1.jpg?w=300" alt="Keith, Jay, and Jason at HackerspaceSG" width="300" height="225" /></a>[/caption]

[caption id="attachment_395" align="alignright" width="300" caption="HackerspaceSG Main Room"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/5453342282_4e3417d48a.jpg"><img class="size-medium wp-image-395" title="HackerspaceSG Main Room" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/5453342282_4e3417d48a.jpg?w=300" alt="HackerspaceSG Main Room" width="300" height="225" /></a>[/caption]

We finally arrived in the Arab Quarter, where the hackerspace is located. The Hackerspace is on the second floor and is a homey set of rooms. There's a main area that has chairs and tables for working and for holding meetings. There's a kitchen and rest room in the back, and then there's the more private area where there are working booths (something like a library's quiet area). Here's a photo of the three of us in the doorway of that section. Note the sign -- although Singapore is a strict place, it's not *that* strict, and they're only kidding.

The next day I went back to Hackerspace and met Shara and Brian, a couple of Rails developers from KL (regional-speak for Kuala Lumpur), Malaysia. Also there was Ben Scherrey, American developer in Bangkok and owner of the building in which Bangkok's Hackerspace has been housed. Ben is doing some interesting Android work, writing code in C++ using Android's NDI.

[caption id="attachment_397" align="aligncenter" width="300" caption="Keith, Jason, Ben, Shara, Brian at HackerspaceSG"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/img_0662.jpg"><img class="size-medium wp-image-397" title="Keith, Jason, Ben, Shara, Brian at HackerspaceSG" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/img_0662.jpg?w=300" alt="Keith, Jason, Ben, Shara, Brian at HackerspaceSG" width="300" height="225" /></a>[/caption]

Now for some things of tourist interest...
<h3>Durian Crepes Stand in Chinatown (yummy!)</h3>
<table>
<tbody>
<tr>
<td>

[caption id="attachment_400" align="alignnone" width="225" caption="Making the Durian Crepe"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/durian-crepe-1-e1305011501950.jpg"><img class="size-medium wp-image-400" title="Making the Durian Crepe" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/durian-crepe-1-e1305011501950.jpg?w=225" alt="Making the Durian Crepe" width="225" height="300" /></a>[/caption]</td>
<td>

[caption id="attachment_401" align="alignnone" width="240" caption="Adding the Durian to the Crepe"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/durian-crepe-2.jpg"><img class="size-medium wp-image-401 " title="Adding the Durian to the Crepe" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/durian-crepe-2.jpg?w=300" alt="Adding the Durian to the Crepe" width="240" height="180" /></a>[/caption]</td>
<td>

[caption id="attachment_402" align="alignnone" width="300" caption="Durian Crepe - The Finished Product"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/durian-crepe-3.jpg"><img class="size-medium wp-image-402" title="Durian Crepe - The Finished Product" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/durian-crepe-3.jpg?w=300" alt="Durian Crepe - The Finished Product" width="300" height="225" /></a>[/caption]</td>
</tr>
</tbody>
</table>
<h3>The Awesome Singapore National Library Building</h3>
[caption id="attachment_403" align="aligncenter" width="300" caption="Singapore National Library"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/singapore-natl-library-1.jpg"><img class="size-medium wp-image-403" title="Singapore National Library" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/singapore-natl-library-1.jpg?w=300" alt="Singapore National Library" width="300" height="225" /></a>[/caption]
<h3>Inside the Hindu Temple in the Bugis Area</h3>
[caption id="attachment_404" align="aligncenter" width="300" caption="Inside the Hindu Temple at Bugis"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/singapore-hindu-temple-1.jpg"><img class="size-medium wp-image-404" title="Inside the Hindu Temple at Bugis" src="http://www.bbs-software.com/blog/wp-content/uploads/2011/05/singapore-hindu-temple-1.jpg?w=300" alt="Inside the Hindu Temple at Bugis" width="300" height="225" /></a>[/caption]
<h3><span class="Apple-style-span" style="font-weight:normal;font-size:13px;">Goodbye, Singapore, until we meet again...</span></h3>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>388</wp:post_id>
		<wp:post_date><![CDATA[2011-05-10 01:45:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-10 06:45:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[singapore-and-its-red-dot-rubyconf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1305189053]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[email_notification]]></wp:meta_key>
			<wp:meta_value><![CDATA[1305189054]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_fb]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>About Me</title>
		<link>http://blog.bbs-software.com/index.php/about/</link>
		<pubDate>Fri, 28 Nov 2008 01:17:09 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/about/</guid>
		<description></description>
		<content:encoded><![CDATA[I am a software developer living and working in the Washington, DC area, and also living in Chiang Mai, Thailand and other places at times. You can find out more about me at <a title="http://about.me/keithrbennett" href="http://about.me/keithrbennett">http://about.me/keithrbennett</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date><![CDATA[2008-11-28 01:17:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-28 01:17:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpb_vc_js_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_vc_post_settings]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:10:"vc_grid_id";a:0:{}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[Keith Bennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[krbofc@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.bbs-software.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.255.40.125]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-30 21:03:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-30 21:03:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This blog will be going up and down for a while while I refine my scripts that build it.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Applying User Interface Design to Source Code</title>
		<link>http://blog.bbs-software.com/index.php/2008/11/28/applying-user-interface-design-to-source-code/</link>
		<pubDate>Sat, 29 Nov 2008 00:36:14 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[The same user interface guidelines that make for an outstanding software product apply to source code as well. It turns out that programmers actually have human minds after all.

Without effective and efficient presentation, a product's content and functionality can be missed and misunderstood. This principle applies way beyond the realm of software products. It also applies to traffic signals, automobiles, elevators, remote controls, exercise equipment, and airline cockpits, to name a few.

A good user interface designer understands and exploits the way the human mind perceives and learns. Good designs translate the essence of the product into a presentation that makes the best use of the toolset of the human mind.
<h3>Who, Me?</h3>
Amazingly, many software developers believe that we as a group somehow transcend the constraints and limitations of human perception, learning, and thought. According to them, that which is necessary for the common masses of "users" does not apply to us, for we are the high priesthood of software engineers, masters of the virtual universe.

<!--more-->
<h3>Source Code</h3>
What am I talking about? Source code, that medium with which we spend so many of our working hours. Although source code is used as input to a compiler, it is also used by humans; that is, us.

If you doubt that principles of user interface design apply to source code, consider a ridiculously extreme exaggeration: a program's source code written as a single line of text with obfuscated names. The compiler would have no problem with this. However, what would it be like to maintain, debug, or enhance such a beast?

Therefore, I propose the following:

<strong>Principle #1: In source code, presentation is important.</strong>

A good presentation can offer cues and clues that assist the reader in quickly learning and understanding the content; a bad presentation is an obstacle rather than an aid.

Individuals have differing degrees of sensitivity to presentation. Those who have no problem transcending lack of organization and visual cues find it difficult to understand those of us who do. This can cause tension among colleagues with differing attitudes and expectations. Which brings me to...

<strong>Principle #2: Human minds differ greatly.</strong>

Brains are not like other human organs, which function basically alike, regardless of the individual. The variations among human minds are huge. If you doubt this, then consider the fact that some people risk their lives to save their fellow man, whereas others celebrate their suffering and destruction.

Variations of the mind apply to learning and intelligence as well. Contrary to the implication of the use of "intelligence tests", there are many types of intelligence. Some people can memorize large amounts of data; others excel at inferring patterns and solving problems; others can read people and know how to get the best out of them; and still others are expert at matters of the heart. Although the amount of respect and value accorded these skills by human societies differs, these are all valuable types of intelligence.

What does this have to do with software engineering?

The failure to recognize, respect, and exploit differences among individuals causes much damage in the workplace. When workers are treated as identical automatons, the result is higher cost, less success, and poor morale.

For example, within our field, some people are good at scanning a problem and crafting a quick and dirty solution; others need more time to thoroughly study the problem domain, but learn it more thoroughly and produce a higher quality solution. Which of the two types should be assigned to develop a prototype? How about a library used by many that must be robust and efficient?

While this at first may appear to be an unfortunate burden, in fact the contrary is true. An astute manager can define and assign tasks in such a way as to exploit each team member's strengths. The result can be morale, timeliness, economy, and project success that far exceeds that derived from the automaton approach. Indeed, the stunning success of the human race in dominating the planet could not have occurred without specialization.

Hopefully you now agree that presentation is important even in source code. Below are a handful of concrete principles and techniques I find helpful toward this end.
<h3>Using Spaces as Separators</h3>
Almost all natural (human) languages use some kind of space to separate words. The Thai language does not. When reading Thai, one must know from the context where one word ends and another begins. This imposes an extra burden on the reader.

My United States passport displays the passport number as nine consecutive digits, without any separators. Reading this number is difficult and error prone. In contrast, telephone numbers in the U.S. are expressed as (999) 999-9999 rather than 9999999999, and postal zip codes are expressed as 99999-9999 rather than 999999999. The reason for this should be obvious. Therefore, it is also better in source code to use spacing in such a way that optimizes readability.

<pre>for(int i=0;i&lt;max&amp;&amp;;(!foo)&amp;&amp;(!bar);i++)</pre>

is better as:

<pre>for(int i = 0; i &lt; max &amp;&amp; (! foo) &amp;&amp; (! bar); i++)
</pre>

...or some variation thereof.
<h3>Right Margins</h3>
Text should rarely if ever extend beyond the right margin of the target reader's page. Compelling the reader to scroll horizontally to read source code results in unnecessary delay and invisibility of some of the nearby source code. In other words, all source code that is part of the visible lines of the display should be visible at any one time. The right margin should be determined by the media you intend to support; if you are using low resolution displays or printed output, your margin would be smaller than if source code will only be read from high resolution displays. If you are working with a team member with especially poor eyesight, then using a shorter maximum line length will be very helpful to that person.
<h3>Minimize Scope and Distance of Local Variables</h3>
Define variables in the narrowest scope possible. If you must have a long method, then consider dividing it into blocks of code with local variables defined inside them. This communicates more information to the reader, namely, that the variables will not be used outside of the block. Doing this also yields the benefit of making refactoring opportunities (that is, method extraction) more obvious.
<h3>Be Aggressive in Dividing Large Classes into Smaller Ones</h3>
Not many software engineers would argue that objects are bad and we should go back to using procedural languages. Yet I've seen in code lots of missed opportunities for clarification by failing to use classes more.

Live a little. Be a big spender. Use classes with reckless abandon wherever they would be helpful and appropriate. Economizing on the number of classes is not very important, as long as each class has a legitimate purpose of existence and is not an incorrect substitute for composition.

Sometimes I'll be working on a class, and notice that it has grown a bit large. If I scrutinize it, I realize that several methods and variables have much in common, but do not share in performing the main mission of the class. For example, I might be working on a TableModel to display the most recently opened files in a Swing application, and need code that manages the "Most Recently Used" (aka "MRU" list). This MRU list belongs in a class of its own. This provides the following benefits:
<ul>
	<li>the more cohesive classes are much easier to test.</li>
	<li>the more aggressive encapsulation reduces the number of interactions, making the code simpler.</li>
	<li>the new class may perform a general function that can be reused elsewhere.</li>
</ul>
Viewing this code in a different light now, one might notice opportunities to simplify it by retrofitting it with third party (e.g. Jakarta Commons) code that is pretested and richer in function.

Wikipedia has an excellent elaboration on this concept of cohesion at <a href="http://en.wikipedia.org/wiki/Cohesion_(computer_science)">http://en.wikipedia.org/wiki/Cohesion_(computer_science)</a>.
<h3>Use Spacing to Communicate Relationships</h3>
A larger separation in meaning should be represented by a larger separation in whitespace. For example, it is common within a method to skip a line for readability. Therefore, I suggest skipping at least <em>two</em> lines between method definitions. This makes it easier for the reader to see that it is a method boundary, and can be especially helpful when viewing an entire file.  Although this is not as important when viewing a file in an IDE, many developers do not use IDE's, and they would not be that helpful when the source code is printed out.

Line continuations should be indented at least twice as much as indentations expressing logical levels such as <pre>if</pre> statements. For example:

<pre>
if (some_really_longggggggggg_condition &amp;&amp;
        another_really_longggggggggg_condition) {
    handleIt();
}
</pre>

The degree of indentation signals to the reader whether the line is a continuation or a deeper level of nesting.

<h3>Maximize the Signal to Noise Ratio</h3>
Anything that appears in the source code should communicate enough meaning to justify its presence. The reader should be able to assume that text exists for a good reason.

For example, the comment below is useless because it adds nothing, and worse than useless because it wastes the reader's time in the process:

<pre>
// gets the foo and puts it into myFoo:
String myFoo = getFoo();
</pre>

<h3>Avoid Code Duplication</h3>
In addition, avoid code duplication. Copying a several line long method and changing a single line is usually a disservice to the project and to your colleagues. If you haven't already read it, pick up a copy of Martin Fowler's excellent book, "Refactoring: Improving the Design of Existing Code", and internalize it. Other types of duplication are elaborated in "The Pragmatic Programmer", an excellent book by Andy Hunt and Dave Thomas. They refer to this concept as "DRY" (Don't Repeat Yourself).

<h3>Be Precise</h3>
Be precise. If the way you have expressed something could be interpreted in ways other than your intention, refine it so that it can't. If a colleague asks you to clarify what an identifier means, consider the question a strong clue that the name may need to be improved.

<h3>Name Precision and Quality as a Function of Scope and Visibility</h3>
The degree to which a name should be precise and accurate depends on the scope of the name's use. For example, the name of a public class should be precise and informative. This is because it may be difficult or even impossible for the reader to consult the source code for clarification. The name may be used far from the source code that would explain it, and that code may not even be available.

On the other hand, the control variable of a two-line loop iterating over an array can be as general as "i". The scope is limited to so small an area that the meaning can be easily inferred from the code right adjacent to it.

<h3>Self Documenting Code</h3>
Prefer self documenting code to code plus documentation. This can be helpful in simplifying logic for the reader. Complex boolean expressions can be simplified by using intermediate boolean variables with human readable names. This self-documenting code is superior to inscrutable code with supplementary comments because comments tend to get stale (i.e. not get updated) when the code is changed.

<h3>Avoid Verbosity</h3>
This is an example of the signal to noise ratio issue. Consider the two methods below that express the same thing:

<pre>
boolean isOddVerbose(int n) {</pre>

<pre>
    boolean odd;
    if (n % 2 == 0) {
        odd = false;
    } else
        odd = true;
    }
    return odd;
}


</pre>

<pre>
boolean isOddConcise(int n) {
    return (n % 2) != 0;
}
</pre>

The reader has far less to parse, and the eyes have far less distance to travel, in the concise method.

Another way of making code clearer and more concise is through the use of the ternary operator (? and :), an often underutilized feature of many programming languages. Consider the two alternative representations of getFoo() below:

<pre>
public Foo getFooVerbose(Bar bar) {</pre>

<pre>
    Foo foo;
    if (bar != null) {
        foo = Foo.X;
    } else {
        foo = Foo.Y;
    }
</pre>

<pre>
    return foo;
}


</pre>


<pre>
public Foo getFooConcise(Bar bar) {
    return (bar != null) ? Foo.X : Foo.Y;
}
</pre>

While the ternary operator may take a little getting used to, once it is familiar it's a handy tool that's hard to do without.
<h3>Conclusion</h3>
I hope I have persuaded you that good presentation in source code is not merely a frill, but rather an essential component of effective communication with your colleagues. Above are just a handful of concrete suggestions of how to do this. I look forward to reading your suggestions as well.

<h3>About Me</h3>
[caption id="attachment_6" align="alignleft" width="250" caption="Keith Bennett"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2008/11/keith-avatar.jpg"><img class="size-full wp-image-6" title="keith-avatar" src="http://www.bbs-software.com/blog/wp-content/uploads/2008/11/keith-avatar.jpg" alt="Keith Bennett" width="250" height="260" /></a>[/caption]

I'm a Sun Certified Java Programmer with over twenty years experience in software development using a wide variety of languages, tools, and operating systems. Currently I live and work in Reston, Virginia, building <a href="http://www.bbsinc.biz">Bennett Business Solutions</a>, a small consulting company focusing on Ruby software development.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date><![CDATA[2008-11-28 19:36:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-29 00:36:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[applying-user-interface-design-to-source-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="user-interface-design-principles-source-code-design"><![CDATA[user interface design principles source code design]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Aube]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[m.f.aube@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[71.62.169.149]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-12-03 22:01:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-12-04 03:01:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Keith,

Very nice presentation tonight on this subject at the NoVaJUG meeting.

I found the "Elvis Operator!"  It's part of the Groovy language:

Elvis Operator (?: )

The "Elvis operator" is a shortening of Java's ternary operator. One instance of where this is handy is for returning a 'sensible default' value if an expression resolves to false or null. A simple example might look like this:

def gender = user.male ? "male" : "female"  //traditional ternary operator usage

def displayName = user.name ?: "Anonymous"  //more compact Elvis operator

We could have used this in our discussion tonight.  This is the thing I was getting at regarding the logical or default value.

Best regards,

Mike]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.49.254.109]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-12-04 01:23:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-12-04 06:23:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting.  Nice shorthand.  

Ruby has something related, but not the same, ||=.  In addition to the use case you mentioned, it can be used for lazy initialization, for example:

resource ||= createResource(param1, param2)

What it does is, if the variable ('resource' in this case) is defined and non-null (not nil in Ruby speak), then the operator does nothing.  Otherwise, the variable is defined if it has not yet been defined, and given the value to the right of ||= (in this case, the value returned by the createResource method).

Thanks for the comment.  It was nice to have such a lively discussion with you guys.

Cheers,
Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[Same Temperature Converter, Different Language &#8212; Clojure &laquo; Keith Bennett&#8217;s Technical Blog]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://krbtech.wordpress.com/2009/03/16/same-temperature-converter-different-language-clojure/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.200.246.66]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-16 17:00:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-16 22:00:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] and logically structured code. I&#8217;m a big fan of this, as you will know if you have read my Applying User Interface Design to Source Code [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[Twitter Weekly Updates for 2010-01-11 - Kan Ouivirach]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://zkan.nokkok.com/2010/01/twitter-weekly-updates-for-2010-01-11/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[122.155.12.32]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-10 12:17:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-10 17:17:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] User Interface Design to Source Code &#8211; http://krbtech.wordpress.com/2008/11/28/applying-user-interface-design-to-source-code/ [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Android GUI&#039;s -- The Case Against GUI Builders and Data Driven GUI Configuration</title>
		<link>http://blog.bbs-software.com/index.php/2011/05/28/android-guis-the-case-against-gui-builders-and-data-driven-gui-configuration/</link>
		<pubDate>Sun, 29 May 2011 02:20:27 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=436</guid>
		<description></description>
		<content:encoded><![CDATA[GUI builders are great, but for building anything more than a trivial solitary application, without discipline and diligence, the duplication can create a productivity and quality quagmire. In addition, XML is a human-hostile configuration language.

<h4>Copy and Paste - Bad!</h4>

As the number of windows increases, the natural tendency is to copy and paste. For the same reasons copy and paste degrade the quality of source code, they do the same to user interface configurations.

<!--more-->

<h4>Changing Project Wide Settings</h4>

On a Java Swing project on which I once worked, it was decided to follow the Java Look and Feel Design Guidelines, and to use some standard project-wide conventions. We had to change lots of windows and components, even down to the minutiae of border pixel widths. Fortunately, we had been creating our UI's in source code, so with some refactoring, I was able to confine these common characteristics to a single shared place in the code.

Consider what would have happened, though, if our GUI configurations had been encoded in XML by a GUI builder. We would have had to painstakingly edit each window's XML file and hope that the repetition and boredom did not numb us into introducing errors. Even if a smart developer automated the parsing, modifying, and regenerating of the XML, there would probably be errors because the way builders are usually used, there is no semantic information in them to communicate intentions...for example, a border width of twelve pixels in one instance might be there because absolute placement was necessary, whereas in another instance it was merely 'whatever our standard border is'.

Even if the rework were done with a GUI builder it would have been a lot of repetitive work. Note too, that in all the cases above, the work involved to make a change does not decrease very much with each successive change. Because of the huge cost of change, the natural result is a fierce resistance to proposed improvements by developers and management alike.
<h4>Mitigating the Damage -- Using Custom Components instead of Framework Components</h4>
However, this could work much better by assembling pre-built custom project components. These project components would configure and combine framework components and conform to the project-wide settings without the need for any attention by the developer that uses them.

The Android platform has some features that enable the developer to extract duplicated configuration in an application into shareable fragments.  In addition, across applications, it supports the creation of shared "libraries" containing both configuration and code that can be statically linked into an Android application's .apk file. This enables the use of standard configurations across applications (or even across the paid and free version of the same application). See Marc Lester Tan's excellent post about the available options <a title="Marc Lester-Tan's Post About Android Anti-Duplication Features" href="http://groups.google.com/group/philippine-android-developers/browse_thread/thread/7b2444dbeefd3045">here</a>.

Creating a component could be done either by creating an XML file for it, or by creating a custom component class in the framework's programming language (Java in our case) and making it available to the GUI builder.

While either approach would centralize the customized settings, creating the component in code would enable assigning meaningful names to option values (e.g. <em>LookAndFeel.STANDARD_BORDER_WIDTH</em> as opposed to <em>12</em>). In addition, it would be possible to calculate values (for example, to accommodate different display device characteristics).

<span class="Apple-style-span" style="font-weight:bold;">The Code / XML Disconnect</span>

As the size of the UI grows, it's almost inevitable that duplication will happen, and the resolving of that duplication by refactoring will lag. However, when development occurs both in source code and in XML (with or without a GUI builder), the distance and disconnect between the two would logically result in a greater lag. Lazy or high pressure projects that routinely trade long term debt for short term velocity may even give up resolving duplication entirely.
<h4>Why Not Just XML?</h4>
So, if using both code and XML present a problematic disconnect, why not use only XML? Because XML is a suitable language for computers, but a miserable language for humans. A wise man once said "XML is like lye; very useful to humans, but they should never touch it."

While formatting and color coding XML code help make it a little more readable, it is nevertheless not very efficient at communicating. Consider, for example, a twenty line element repeated twenty times, where all elements vary only in the value of a single integer. Source code could easily communicate the similarities and differences, whereas XML would hide them.
<h4>Android -- Java and XML</h4>
The Android development team encourages the use of XML rather than Java code for defining user interface elements. The Java language is verbose, rigid, and ceremonial, so defining the user interfaces in code is not that dramatic an improvement over XML.

In contrast, using a more flexible language (my choice would be Ruby) would make a better approach feasible. It would be possible to write a domain specific language (something like Ruby on Rails, but probably a lot smaller) that would simplify development and facilitate the creation of living (i.e. executable) configuration that is comprehensible, maintainable, and extensible. I think I'll call it...<em>Ruby on Roids</em>. ;)

There are, of course, technical challenges to using Ruby on the Android platform. The most difficult one is probably the limited amount of memory on handheld Android devices. Languages like Ruby use more memory than Java. The JRuby team is working on Ruboto and Mirah, both of which are promising, but not quite there yet.
<h4>What About Our Designers?</h4>
If all design is implemented as code, then it would be more difficult to separate design work from programming work. However, a solution to this would be to have designers design mockups with XML, and then have developers implement them in code. Alternatively, the two could work together when designing.
<h4>What Can We Do Now?</h4>
I eagerly await the coming of age of Ruby alternatives for Android development. Until then, my plan is to use Java, and to write my UI's in Java rather than XML as much as possible.

Personally, I've done very little work with GUI builders. For those of you who have, what was your experience? How did you handle duplication, maintainabilty, and extensibility? What were the challenges, and how did you overcome them?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date><![CDATA[2011-05-28 21:20:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-29 02:20:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[android-guis-the-case-against-gui-builders-and-data-driven-gui-configuration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1306635627]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_fb]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[email_notification]]></wp:meta_key>
			<wp:meta_value><![CDATA[1306635627]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[mcknight]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[matt.mcknight@lmnsolutions.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/mcknight</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[96.255.42.145]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-06-25 07:20:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-06-25 12:20:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Four loosely connected thoughts:

1. I think the simplest next step is to break up the gui descriptors (layouts, fragments, etc) to prevent duplication.

2. There is a decent amount of pulling styling out of the layout in Android, thanks to the positive influence of CSS.

3. Java uses XML as it's dynamic programming language, but the use here seems more static because of the googly way of working it into the compilation instead of consulting the XML at runtime. This prevents the use of something dynamic to generate the XML (like the XML Builder library in Ruby or Groovy)

4. Generating the UI in code isn't much fun either, as XML/HTML templates, IDEs and the like give you a pretty good overall view of what your page will look like. My money's on IntelliJ to come up with something.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309004415.0968";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1309019961]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309019962.1635";s:7:"message";s:52:"keithrbennett changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"keithrbennett";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[Andy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[scaredycat@automated.it]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.automated.it</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.187.78.193]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-10-28 05:42:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-10-28 10:42:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I swear I'd enjoy tweaking every little thing in a GUI builder if it meant that building the GUI I wanted for an android application wasn't going to make me want to stand in front of an oncoming train.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319798527.3899";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1319901124]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1319901124.216";s:7:"message";s:52:"keithrbennett changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"keithrbennett";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Design by Contract, Ruby Style</title>
		<link>http://blog.bbs-software.com/index.php/2011/06/15/dependency-inversion-ruby-style/</link>
		<pubDate>Thu, 16 Jun 2011 04:22:49 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=450</guid>
		<description></description>
		<content:encoded><![CDATA[I recently encountered a situation in which I was writing data to a key/value data store.  There was a code layer that insulated the business logic layer from the data store internals.  I wanted to be able to unit test this business logic without needing access to the data store.

I could mock the data access layer, but I wanted something more functional -- something that would <em>behave</em> like the data store layer, and possibly even be used to test it.  I decided to write something mimicking the production data store layer that used a Ruby Hash for storage.  How could I use the language to help me know that I had faithfully reproduced all the functions in the original object?
<!--more-->
<h3>Dependency Inversion</h3>

Dependency inversion is defined in <a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle" title="Wikipedia">Wikipedia</a> as:

A. High-level modules should not depend on low-level modules. Both should depend on abstractions.
B. Abstractions should not depend upon details. Details should depend upon abstractions.

Using this principle, I rearranged the business layer so all it needed to know about its data access object was the method signatures and nothing else, not even its type.  The data access object was passed into the business object's constructor rather than the business object instantiating it directly (and thereby needing to know its type). That opened the door to alternate data access strategies, including a trivial implementation for unit testing.

<h3>Java Interfaces</h3>

If you've coded in Java, you'll recognize that this principle is what Java interfaces are all about.  Using Java interfaces involves the following:

1) defining the interface, that is, the signatures of the methods that need to be defined by implementations of that interface.

2) defining object references in the code that refer to the implementations as the interface type rather than the implementation type.

3) creating implementations of that interface.

<h3>Ruby's Duck Typing</h3>

Ruby uses duck typing, which eliminates the need for #1.  Unlike Java with its compile time checking, Ruby doesn't verify the existence of the method before it's actually called -- it trusts the method to be there, and calls it, raising an error if it doesn't exist, and is not handled by a method_missing function. In addition, in Ruby, references are not typed, eliminating the need for #2. 

In this way, Ruby makes dependency inversion effortless and automatic.  

Many Ruby developers believe the Java interface approach to be obtrusive and verbose.  However, there can be issues with Ruby's permissive approach as well. For example, while relying on duck typing is convenient, we want noncompliant implementations to fail quickly and gracefully.  Using duck typing alone, the absence of a method will be detected only when it is called -- and in the absence of adequate unit testing (which could be beyond one's control), this could result in premature termination of a long job, or the detection of the error months after its introduction.  

In addition, it would be helpful to show the user <em>all</em> the methods that are missing, not just the one that was called.  Duck typing will not do that; it will throw a NoMethodError only for the method called.

There are other problems with relying exclusively on duck typing. Where can the author of a new implementation of the contract find all the methods that need to be implemented?  Maybe one of the implementations?  Which one?  And can we trust that the author of that implementation made private all the methods that are not needed in the public interface?

<h3>Making the Promise in Executable Code</h3>

For the same reason that self documenting code is better than comments, these required methods should be expressed as executable code rather than included in some documentation file. Further, this promise is such an important part of the class' existence, that it makes sense to include it somewhere inside the class definition. (The promise could live here even if we only validate the class' adherence to the contract during unit testing.)

Sometimes this will be overkill -- if we have complete control over our source code, then we can unit test to our heart's delight, and guarantee that only thoroughly tested code makes it to production.  However, there are some situations in which more verification would be helpful.

<h3>An Illustrative Example</h3>

Let's say we're writing a flexible data processing framework that allows users to plug in their own implementations of actions. As a trivial example, let's say that one of the services of this framework is encrypting strings, and we want the users to be able to provide their own encryption strategies.

Let's assume there are lots of these plugins used by the system, some provided by the software authors and others provided by customers and third parties.  Let's also assume that we want to verify that these plugins implement the required methods before starting the job.  (The job may take a long time, use expensive resources, be especially critical, etc.)

What is the appropriate Ruby way to provide some kind of confidence in these plugins?  Certainly, we should be providing implementation authors with comprehensive test suites that test much more than the presence of required methods. However, let's go further than that. Let's provide a mechanism to enable this verification at any time, not just in unit tests.

Here is a class that can be used to verify the presence of instance methods (also at <a href="https://gist.github.com/1034788" title="instance_method_validator.rb">https://gist.github.com/1034775</a>):

[sourcecode lang="ruby"]
# Shows a crude way to enforce that a class implements
# required methods.  Use it like this:
#
# class OkClass
#   def foo; end
#   def bar; end
#   def baz; end
# end
#
#
# class NotOkClass
#   def foo; end
# end
#
#
# verifier = InstanceMethodVerifier.new([:foo, :bar, :baz])
# verifier.verify('OkClass')
# verifier.verify('NotOkClass')
#
# $ ruby instance_method_verifier.rb                                                                                                                                       14.Jun.11 15.21
# instance_method_verifier.rb:22:in `verify': Class NotOkClass is missing the following required functions: bar, baz (RuntimeError)
#	from instance_method_verifier.rb:42

class InstanceMethodValidator

  attr_accessor :required_function_names


  def initialize(required_function_names)
    @required_function_names = required_function_names
  end


  # klass can be either a class name or a class object.
  def validate(klass)

    if klass.is_a? String
      klass = Kernel.const_get(klass)
    end

    missing_function_names = required_function_names - klass.public_instance_methods

    unless missing_function_names.empty?
      raise Error.new(&quot;Class #{klass} is missing the following required functions: #{missing_function_names.join(&quot;, &quot;)}.&quot;)
    end
  end


  class Error &lt; RuntimeError
  end
end
[/sourcecode]

The contract below (also at <a href="https://gist.github.com/1034788" title="encryption_contract.rb">https://gist.github.com/1034784</a>) lists the required methods.  It's also a good place to provide information about these methods.  

[sourcecode lang="ruby"]
require 'instance_method_validator'

module EncryptionContract

  def required_function_names
      [
      # The purpose of this function is self-evident, but in other
      # cases the methods would benefit from some explanation
      # that would be helpful to authors of new implementations,
      # such as defining correct behavior, format and data type
      # of arguments and return values.
      #
      # encrypt a string
      #
      # arg: the string to encrypt
      # returns: the encrypted string 
      'encrypt',
      
      # decrypts a string 
      #
      # arg: the string to decrypt
      # returns: the decrypted string 
      'decrypt',          # (encrpyted string)
    ]
  end

  
  def validate_contract(klass = self.class)
    InstanceMethodValidator.new(required_function_names).validate(klass)
  end
end
[/sourcecode]

Now let's write a naive example implementation.  Having the above code makes it trivial for the implementer to test that all required methods are implemented.  Here is the rspec (also at <a href="https://gist.github.com/1034788" title="reverse_encrypter_spec.rb">https://gist.github.com/1034785</a>):

[sourcecode lang="ruby"]
require 'rspec'
require 'reverse_encrypter'

describe ReverseEncrypter do
  
  it &quot;should implement required methods&quot; do
    lambda { subject.validate_contract }.should_not raise_error
  end
end
[/sourcecode]

Here is the implementation itself (see also <a href="https://gist.github.com/1034788" title="encryption_contract.rb">https://gist.github.com/1034788</a>):

[sourcecode lang="ruby"]
require 'encryption_contract'

# Naive and totally lame encrypter that just reverses the string.
class ReverseEncrypter

 include EncryptionContract

 def encrypt(s)
   s.reverse
 end

 def decrypt(s)
   s.reverse
 end
end
[/sourcecode]

In a pluggable framework as described above, it can be helpful to validate all "foreign" (that is, not provided by the framework authors) components as thoroughly as possible.  The approach above enables the validation to be done at will, either in unit tests or at runtime.  It's a trivial function call and takes virtually no time to execute.

Another benefit of using this approach is that it naturally results in more thought given to the public interface.  Do we really need all those methods?  Do I need to change any method names so they don't hint at implementation? Do I need to use a higher level object in my calling code to better insulate myself from the implementation?

<h3>Conclusion</h3>

This approach is no substitute for thorough unit testing.  On the contrary, it is an <em>aid</em> to unit testing, and more.

Omitting a function is just one of an infinite number of ways to screw up an implementing class.  This approach doesn't verify that the arguments to the function are consistent across implementations, and that is very important too.  Nor does it help test behavior. Nevertheless, given that limitation, it has the following benefits. It:

<ul>
<li>formalizes the contract in executable code, where it is far more likely to be current</li>
<li>provides an authoritative source of that contract</li>
<li>promotes thinking more about the public interface</li>
<li>aids in writing a new implementation class</li>
<li>makes testing implementations DRYer; required method names are in one place rather than multiple unit tests, one for each implementation, so tests are more likely to be present, and more likely to be correct</li>
<li>can be validated outside of unit tests</li>
</ul>

I think that's pretty worthwhile.  That said, I'd be interested in better ways.  Feel free to comment on this article.

- Keith
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date><![CDATA[2011-06-15 23:22:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-06-16 04:22:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dependency-inversion-ruby-style]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1308198174]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[email_notification]]></wp:meta_key>
			<wp:meta_value><![CDATA[1308198174]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_fb]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[Russ Olsen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[russ@russolsen.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.russolsen.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.1.16.126]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-06-16 08:16:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-06-16 13:16:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Keith,

First let me say that I applaud your efforts - it's exactly this sort of 'what about this...'  thinking that helps everyone get better. I do think that your ideas show how hard it is to shift modes of thinking, 

If I understand your code correctly, you are building a class that verifies that some other class implements a given set of instance methods in a effort to avoid typing problems at runtime. Here are some things that I think you should consider:

* A Ruby class does not completely describe the behavior of it's instances. Instances are free to define singleton methods of their own, pull in modules etc. This is not terribly common, but it is perfectly acceptable Ruby.

* The methods returned via instance_methods do not necessarily describe all of the messages that instances of the class can respond to. Using method_missing, a class can build all sorts of behavior that instance_methods will miss.

*This is a nit, but I think you should be using public_instance_methods rather than instance_methods, so that you don't accidentally see private methods which would be un-callable.

* Also I think you could implement your 'is the method there?' code  a bit cleaner with array arithmetic - it turns out that (array1 - array2) will give you an array with all of the elements in the first array that are not in the 2nd.

These are all details, however. The real issue is that years of working with static typing has left us all with the focus what methods a class supports and perhaps the types of their arguments and that sort of thing. Certainly in a language like Ruby you can have problems with methods not being there. But the 'this object does not support the right methods' bug is only one of an infinite number of mistakes that you can make. The crazy thing is that the type related issues that statically typed languages devote so much time and energy to are simply not that common compared to some of the other bone headed things we do everyday. As others have pointed out on the novarug mailing list, the only way to hunt down those bugs is to write unit tests. 

Think about the kind of test support that rails give you - I can't think of any magic rails thing that checks to see if this class has the right methods. But what you do have is lots and lots of tools that help you test your objects in situ.

Anyway, those are my $0.02. Thanks for putting this out there - no matter if I agree with your approach or not, this kind of carefully written article is always helpful.

Russ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1308230182.501";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1308231791]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308231791.6905";s:7:"message";s:52:"keithrbennett changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"keithrbennett";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[76.100.60.133]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-06-19 16:41:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-06-19 21:41:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Russ -

Thanks for visiting my blog.  You make some good suggestions that I will incorporate into the article and my code (e.g. array subtraction and use of the public_instance_methods method).

Among the languages I've learned over the years, Java is the most formal and Ruby the most informal.  From where I stand, my strategy has nothing to do with an incomplete grasp of the Ruby way; rather, in my opinion, my use case requires something a little more formal than Ruby duck typing alone. We are (hopefully) software developers and problem solvers first, and Ruby developers second -- the operative questions should be "does this make sense?", "do the benefits exceed the costs?", etc., more than "do other people do it like this in Ruby?". While I'm not saying that the latter question is devoid of merit, its weight should be tempered by the nature of the problem at hand. I realize that your reasoning goes well beyond adherence to the Ruby way, but it sounded to me like that was part of it.

What you say about method_missing, singleton methods, modules, etc., is true.  However, again, I am making an architectural decision to formalize the contract -- in that context, I think it's reasonable to require that a function be explicitly defined.  In my case, these classes are written specifically for this framework, so it's not likely that people have classes lying around that adhere to the contract but use the other mechanisms you mentioned; and even if they did, a delegating method would be trivial to add.

As for the tools provided by Rails, I'm using Ruby but not Rails.  Nor am I very familiar with Rails, so if it contains tools that would be helpful here, I would appreciate any pointers.

You're not alone in your critique of my idea.  Many others have said that unit tests are the *only* place for this verification. However, in my opinion, there are some pretty compelling benefits I mentioned in the article which have not been addressed (see the bullet points at the conclusion for a summary).

By the way, I've renamed the article from "Dependency Inversion, Ruby Style" to "Design by Contract, Ruby Style".  Dependency inversion, Ruby style is provided automatically due to duck typing, so it wasn't an appropriate title.

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>36</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1308519666]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308519667.5119";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:13:"keithrbennett";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>class_eval, instance_eval, eval</title>
		<link>http://blog.bbs-software.com/index.php/2012/01/28/class_eval-instance_eval-eval/</link>
		<pubDate>Sat, 28 Jan 2012 21:17:08 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=508</guid>
		<description></description>
		<content:encoded><![CDATA[A couple of days ago I attended an interesting discussion of metaprogramming by Arild Shirazi at a meeting of the Northern Virginia Ruby User Group. Arild showed how he used metaprogramming (<em>class_eval</em> in particular) to generate functions whose names would only be known at runtime. His talk was very effective at reminding me that I don't know as much about metaprogramming as I thought!

<!--more-->(Feel free to offer suggestions and corrections, and I'll try to update the article accordingly.)

Dave Thomas, in his excellent Advanced Ruby training, emphasizes the value of knowing just who <em>self</em> is at any point in the code. (For a good time, bounce around an rspec source file and try to guess what <em>self</em> is in various places...).

<em>class_eval</em> provides an alternate way to define characteristics of a class. It should be used only when absolutely necessary. The only legitimate use I can think of is when the necessary code cannot be known until runtime.

Knowing very little about <em>class_eval</em>, I assumed that it changed self to be the class of the current value of self. I was wrong. class_eval doesn't change self at all; in fact, in this respect it functions identically to eval:

[sourcecode lang="ruby"]
&gt; class ClassEvalExample
&gt;   class_eval &quot;def foo; puts 'foo'; end&quot;
&gt; end
&gt; ClassEvalExample.new.foo
foo
[/sourcecode]

<em>eval</em> appears to do the exact same thing:

[sourcecode lang="ruby"]
&gt; class EvalExample
&gt;   eval &quot;def foo; puts 'foo'; end&quot;
&gt; end
&gt; EvalExample.new.foo
foo
[/sourcecode]

There is a difference, though, when you call them outside the class definition. For a class C, you can call C.class_eval, but not C.eval:

[sourcecode lang="ruby"]
&gt; class C1; end
&gt; C1.class_eval &quot;def foo; puts 'foo'; end&quot;
&gt; C1.new.foo
foo

&gt; class C2; end
&gt; C2.eval &quot;def foo; puts 'foo'; end&quot;
NoMethodError: private method `eval' called for C2:Class
	from (irb):2
	from :0
[/sourcecode]

If class_eval could be used to define an instance method on a class in a class definition <em>outside</em> a function, what would happen if it were used <em>inside</em> a function, where self is no longer the class, but the instance of the class? Would it define a method on the singleton class (a.k.a. <em>eigenclass</em>)? Let's try it:

[sourcecode lang="ruby"]
 :001 &gt; class D
 :002?&gt;     def initialize
 :003?&gt;         puts &quot;In initialize&quot;
 :004?&gt;         class_eval &quot;def foo; puts 'foo'; end&quot;
 :005?&gt;       end
 :006?&gt;   end
 =&gt; nil
 :007 &gt;
 :008 &gt;   D.new.foo
In initialize
NoMethodError: undefined method `class_eval' for #
	from (irb):4:in `initialize'
	from (irb):8:in `new'
	from (irb):8
	from :0
[/sourcecode]

No, this didn't work...but wait a minute, isn't class_eval a Kernel method? Let's find out:

[sourcecode lang="ruby"]
&gt; Kernel.methods.include? 'class_eval'
=&gt; true
[/sourcecode]

Alas, I was asking the wrong question. I should have asked if Kernel had an <em>instance</em> method named <em>class_eval</em>:

[sourcecode lang="ruby"]
&gt; Kernel.instance_methods.include? 'class_eval'
=&gt; false
[/sourcecode]

It doesn't, but <em>Class</em> does:

[sourcecode lang="ruby"]
&gt; Class.instance_methods.include? 'class_eval'
=&gt; true
[/sourcecode]

...which is why the Kernel.methods.include? above worked.

Although <em>class_eval</em> didn't work, <em>instance_eval</em> will work:

[sourcecode lang="ruby"]
&gt; class F
&gt;   def initialize
&gt;     instance_eval 'def foo; puts &quot;object id is #{object_id}&quot;; end'
&gt;   end
&gt; end
&gt; F.new.foo
object id is 2149391220
&gt; F.new.foo
object id is 2149362060
[/sourcecode]

To illustrate that foo has not been created as a class or member function on class F, but only on object f:

[sourcecode lang="ruby"]
&gt; F.methods(false).include? 'foo'
 =&gt; false
&gt; F.instance_methods(false).include? 'foo'
 =&gt; false
&gt; f = F.new
&gt; f.methods(false).include? 'foo'
 =&gt; true
[/sourcecode]

Could <em>eval</em> be substituted for <em>instance_eval</em> in the same way as it was for <em>class_eval</em>? Let's find out...

[sourcecode lang="ruby"]
&gt;   class F2
&gt;     def initialize
&gt;         eval 'def foo; puts &quot;object id is #{object_id}&quot;; end'
&gt;     end
&gt; end
&gt; F2.new.foo
object id is 2149180440
[/sourcecode]

Apparently, yes. However, similarly to <em>class_eval</em>, <em>instance_eval</em> can be called outside of a class definition, but <em>eval</em> cannot:

[sourcecode lang="ruby"]
&gt; class C; end
&gt; c = C.new
&gt; c.instance_eval 'def foo; puts &quot;object id is #{object_id}&quot;; end'
&gt; c.foo
object id is 2149446940

&gt; class D; end
&gt; d = D.new
&gt; d.eval 'def foo; puts &quot;object id is #{object_id}&quot;; end'
NoMethodError: private method `eval' called for #
	from (irb):7
	from :0
[/sourcecode]

Hmmm, I wonder, if we can define a <em>function</em> using the eval methods, can we also declare an instance <em>variable</em>?:

[sourcecode lang="ruby"]
# First, class_eval:
&gt; class E
&gt;   class_eval &quot;@@foo = 123&quot;
&gt;   def initialize; puts &quot;@@foo = #{@@foo}&quot;; end
&gt;   end
&gt; E.new
@@foo = 123

# Next, instance_eval:
&gt; o = Object.new
&gt; o.instance_eval '@var = 456'
&gt; o.instance_eval 'def foo; puts &quot;@var = #{@var}&quot;; end'
&gt; o.foo
@var = 456
[/sourcecode]

What's interesting is that we created instance variable <em>var</em> in instance <em>o</em>, but its class Object knows nothing about this new variable. In the data storage world, this would be analogous to using a document store such as MongoDB and adding a variable to a single document, unlike in an RDBMS where you would have to add it to the table definition and include it in all rows of the table.

Techniques such as these are cool and powerful, but are not without cost. If your code accesses a function or variable that is not defined in a standard class definition, the reader may have a hard time tracking down the creation and meaning of that function or variable. We should be kind to our fellow developers and use these techniques only when absolutely necessary.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>508</wp:post_id>
		<wp:post_date><![CDATA[2012-01-28 16:17:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-01-28 21:17:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[class_eval-instance_eval-eval]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1327785429]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[publicize_results]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:14401983;a:2:{s:7:"user_id";s:13:"keithrbennett";s:7:"post_id";s:18:"163370058670800896";}}s:2:"fb";a:1:{i:623669774;a:2:{s:7:"user_id";s:9:"623669774";s:7:"post_id";s:17:"10150532283844775";}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[email_notification]]></wp:meta_key>
			<wp:meta_value><![CDATA[1327785430]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_fb]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mailing Files Programmatically with GMail</title>
		<link>http://blog.bbs-software.com/index.php/2012/07/25/mailing-files-programmatically-with-gmail/</link>
		<pubDate>Wed, 25 Jul 2012 18:06:10 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=536</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I had the need to send someone multiple 1-2 MB files. Email was the best option, for reasons that are not very interesting, and outside the scope of this article.

I naturally turned to my favorite language, Ruby.  I did a little research into the various gems and their configuration, and offer this simple example (source code below) in the hope that it will save you a little time if you have the same need.

<!--more-->

I've tried to trim out anything not relating to the actual sending of the mail so that you can more easily understand it and adapt it for your use.

- Keith

[gist id=3605940]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>536</wp:post_id>
		<wp:post_date><![CDATA[2012-07-25 13:06:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-25 18:06:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mailing-files-programmatically-with-gmail]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1343239571]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[email_notification]]></wp:meta_key>
			<wp:meta_value><![CDATA[1343239571]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_facebook]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JRuby Presentation, Northern Virginia Ruby User Group</title>
		<link>http://blog.bbs-software.com/index.php/2012/09/04/jruby-presentation-northern-virginia-ruby-user-group/</link>
		<pubDate>Tue, 04 Sep 2012 01:17:57 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://krbtech.wordpress.com/?p=555</guid>
		<description></description>
		<content:encoded><![CDATA[Here are the slideshow and audio for my recent JRuby presentation at the Northern Virginia Ruby User Group meeting in Reston, Virginia on August 28, 2012.

<script async class="speakerdeck-embed" data-id="4faa29cf52fc62002201cc58" data-ratio="1.299492385786802" src="//speakerdeck.com/assets/embed.js"></script>

The slideshow and audio are not synchronized, but you can play the audio below and advance the slides above as appropriate:

<center>[powerpress]</center>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>555</wp:post_id>
		<wp:post_date><![CDATA[2012-09-04 01:17:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-04 01:17:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jruby-presentation-northern-virginia-ruby-user-group]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://www.bbs-software.com/blog/wp-content/uploads/2012/09/jruby-presentation-20120828-keith-bennett.mp3
8704332
audio/mpeg
a:1:{s:8:"duration";s:8:"00:48:21";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://about.me/keithrbennett</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.255.28.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-10-04 15:38:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-10-04 15:38:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just upgraded my Mac OS from Snow Leopard to Mountain Lion.  The upgrade deletes all Java VM's/JDK's.  The Oracle JDK can be downloaded from Oracle's site at http://www.oracle.com/technetwork/java/javase/downloads/jdk7u7-downloads-1836413.html.  JVisualVM is no longer packaged with the JDK but can be easily downloaded from http://visualvm.java.net/index.html.

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Adventures in</title>
		<link>http://blog.bbs-software.com/?p=1134</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=1134</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1134</wp:post_id>
		<wp:post_date><![CDATA[2012-12-27 16:57:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>me-sitting-with-laptop</title>
		<link>http://blog.bbs-software.com/me-sitting-with-laptop/</link>
		<pubDate>Wed, 31 May 2017 03:52:18 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://blog.bbs-software.com/wp-content/uploads/2017/05/me-sitting-with-laptop.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1348</wp:post_id>
		<wp:post_date><![CDATA[2017-05-31 03:52:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-31 03:52:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[me-sitting-with-laptop]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.bbs-software.com/wp-content/uploads/2017/05/me-sitting-with-laptop.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/me-sitting-with-laptop.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2837;s:6:"height";i:2475;s:4:"file";s:34:"2017/05/me-sitting-with-laptop.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"me-sitting-with-laptop-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:34:"me-sitting-with-laptop-300x262.jpg";s:5:"width";i:300;s:6:"height";i:262;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:34:"me-sitting-with-laptop-768x670.jpg";s:5:"width";i:768;s:6:"height";i:670;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:35:"me-sitting-with-laptop-1024x893.jpg";s:5:"width";i:1024;s:6:"height";i:893;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:35:"me-sitting-with-laptop-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:35:"me-sitting-with-laptop-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"me-sitting-with-laptop-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"me-sitting-with-laptop-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:34:"me-sitting-with-laptop-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"5.3";s:6:"credit";s:0:"";s:6:"camera";s:9:"NIKON D90";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1465612042";s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"66";s:3:"iso";s:3:"250";s:13:"shutter_speed";s:4:"0.01";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-me-sitting-with-laptop.jpg</title>
		<link>http://blog.bbs-software.com/cropped-me-sitting-with-laptop-jpg/</link>
		<pubDate>Wed, 31 May 2017 03:52:35 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://blog.bbs-software.com/wp-content/uploads/2017/05/cropped-me-sitting-with-laptop.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://blog.bbs-software.com/wp-content/uploads/2017/05/cropped-me-sitting-with-laptop.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1349</wp:post_id>
		<wp:post_date><![CDATA[2017-05-31 03:52:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-31 03:52:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-me-sitting-with-laptop-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.bbs-software.com/wp-content/uploads/2017/05/cropped-me-sitting-with-laptop.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/cropped-me-sitting-with-laptop.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:42:"2017/05/cropped-me-sitting-with-laptop.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"cropped-me-sitting-with-laptop-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:42:"cropped-me-sitting-with-laptop-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:42:"cropped-me-sitting-with-laptop-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:42:"cropped-me-sitting-with-laptop-512x480.jpg";s:5:"width";i:512;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:42:"cropped-me-sitting-with-laptop-512x335.jpg";s:5:"width";i:512;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-270";a:4:{s:4:"file";s:42:"cropped-me-sitting-with-laptop-270x270.jpg";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-192";a:4:{s:4:"file";s:42:"cropped-me-sitting-with-laptop-192x192.jpg";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-180";a:4:{s:4:"file";s:42:"cropped-me-sitting-with-laptop-180x180.jpg";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:10:"image/jpeg";}s:12:"site_icon-32";a:4:{s:4:"file";s:40:"cropped-me-sitting-with-laptop-32x32.jpg";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello world!</title>
		<link>http://blog.bbs-software.com/index.php/2017/05/31/hello-world__trashed-3/</link>
		<pubDate>Wed, 31 May 2017 03:42:36 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://blog.bbs-software.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[Welcome to WordPress. This is your first post. Edit or delete it, then start writing!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2017-05-31 03:42:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-31 03:42:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world__trashed-3]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1496202285]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_comments_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:1;s:1:"1";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[A WordPress Commenter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wapuu@wordpress.example]]></wp:comment_author_email>
			<wp:comment_author_url>https://wordpress.org/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-31 03:42:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-31 03:42:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, this is a comment.
To get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.
Commenter avatars come from <a href="https://gravatar.com">Gravatar</a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[post-trashed]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Conway&#039;s Game of Life Viewer</title>
		<link>http://blog.bbs-software.com/index.php/2012/09/05/conways-game-of-life-viewer/</link>
		<pubDate>Wed, 05 Sep 2012 23:30:57 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=584</guid>
		<description></description>
		<content:encoded><![CDATA[Later this month I'll be joining dozens of other coders at <a href="http://www.rubydcamp.org">Ruby DCamp</a>, where we'll spend three days talking, coding, and camping. The first day is usually code katas (exercises), and often one of them is the implementation of <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway's Game of Life</a>.

By design, there's not enough time to do a complete implementation with viewer, so I thought it would be cool to write a viewer into which you could plug your own model implementation and "play" that model visually.

In addition to using the viewer to run different implementations of the Game of Life, it could also be useful in coming up with illustrative and interesting game data, using the provided model implementation.

We often have poor or nonexistent Internet connectivity, and client/server seemed to be overkill, so I brushed off my old Java Swing skills and wrote a minimal viewer in JRuby. The code is at <a href="https://github.com/keithrbennett/life_game_viewer">https://github.com/keithrbennett/life_game_viewer</a>.

Here's a screen shot:

<a href="http://www.bbs-software.com/blog/wp-content/uploads/2012/09/life-game-viewer7.png"><img src="http://www.bbs-software.com/blog/wp-content/uploads/2012/09/life-game-viewer7.png" alt="Life Game Viewer Screenshot" title="life-game-viewer" width="799" height="637" class="aligncenter size-full wp-image-666" /></a>

<!--more-->

<div>In case you don't recognize the face, it's Alfred E. Neuman, made famous by Mad magazine, but, as I just learned this minute from Wikipedia (I read it there so it <em>must</em> be true), "[his] face had drifted through American pictography for decades before being claimed and named by <em>Mad</em>..."...but I digress...</div>

You can install the gem in the usual way (make sure you're in JRuby when you do):

[code]
gem install life_game_viewer
[/code]

A sample model implementation with sample initial values are provided so that you can play with the viewer before beginning the exercise. This sample implementation is available by running <code>LifeGameViewer::Main.view_sample</code> in irb, or <code>life_view_sample</code> on the command line.

You can't see it in this image, but if you hover over a cell, a tool tip containing the coordinates and the value (alive or not) will be displayed.

One of my favorite features is the simplicity of data initialization.  One of the required model methods is a static method <em>create</em>, which takes a row count, column count, and optionally, a block with which to initialize each cell. This makes it simpler and more concise to experiment with forumulas and patterns.  For example, the code below would result in an X shaped board, and is all the code you'd need to run the viewer.

[code lang="ruby"]
require 'life_game_viewer'

model = SampleLifeModel.create(12, 12) do |row, col|
  (row + col == 11) || (row == col)
end
LifeGameViewer::Main.view(model)
[/code]

[caption id="attachment_688" align="aligncenter" width="800"]<a href="http://www.bbs-software.com/blog/wp-content/uploads/2012/09/life-game-viewer-x-board1.png"><img src="http://www.bbs-software.com/blog/wp-content/uploads/2012/09/life-game-viewer-x-board1.png" alt="Board initialized with: (row + col == 11) || (row == col)" title="life-game-viewer-x-board" width="800" height="565" class="size-full wp-image-688" /></a> Board initialized with: (row + col == 11) || (row == col)[/caption]

There's a lot more information, including instructions and troubleshooting, on the <a href="https://github.com/keithrbennett/life_game_viewer">Life Game Viewer project page</a>, and in comments in the source code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>584</wp:post_id>
		<wp:post_date><![CDATA[2012-09-05 23:30:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-05 23:30:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[conways-game-of-life-viewer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby&#039;s Forwardable</title>
		<link>http://blog.bbs-software.com/index.php/2012/09/13/rubys-forwardable/</link>
		<pubDate>Thu, 13 Sep 2012 11:02:24 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=698</guid>
		<description></description>
		<content:encoded><![CDATA[Last night I had the pleasure of attending the <a href="http://www.meetup.com/Arlington-Ruby/">Arlington Ruby User Group</a> meeting in Arlington, Virginia.  Marius Pop, a new Rubyist, presented on Ruby's <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/forwardable/rdoc/Forwardable.html">Forwardable</a> module.  Forwardable allows you to very succinctly specify that you want to define a method that simply calls (that is, delegates to) a method on one of the object's instance variables, and returns its return value, if there is one.  Here is an example file that illustrates this:

[code lang="ruby"]
require 'forwardable'

class FancyList
  extend Forwardable
  
  def_delegator :@records, :size
  
  def initialize
    @records = []
  end
  
end

puts &quot;FancyList.new.size = #{FancyList.new.size}&quot;
puts &quot;FancyList.new.respond_to?(:size) = #{FancyList.new.respond_to?(:size)}&quot;

# Output is:
# FancyList.new.size = 0
# FancyList.new.respond_to?(:size) = true
[/code]

After the meeting I thought of a class I had been working on recently that would benefit from this.  It's the <a href="https://github.com/keithrbennett/life_game_viewer/blob/a56d329901999b20a2b23117d2fe2a8155a3799a/lib/life_game_viewer/view/life_table_model.rb" title="LifeTableModel class">LifeTableModel</a> class in my <a href="https://github.com/keithrbennett/life_game_viewer">Life Game Viewer</a> application, a Java Swing app written in JRuby. The LifeTableModel is the model that backs the visual table (in Swing, a <em>JTable</em>). Often the table model will contain the logic that provides the data to the table, but in my case, it was more like a thin adapter between the table and other model objects that did the real work.

It turned out that almost half the methods were minimal enough to be replaced with Forwardable calls.  The diff is shown here:

<!--more-->

[gist id=3713110]

The modified class is viewable on Github <a href="https://github.com/keithrbennett/life_game_viewer/blob/6a44806a15e708068258f30b45c60c36a2142d87/lib/life_game_viewer/view/life_table_model.rb">here</a>.

As you can see, there was a substantial reduction in code, and that is always a good thing as long as the code is clear.  More importantly, though, <code>def_delegator</code> is much more expressive than the equivalent standard method definition. It's much more precise because it says this function delegates to another class' method <em>exactly</em>, in no way modifying the behavior or return value of that other function.  In a standard method definition you'd have to inspect its body to determine that.  That might seem trivial when you're considering one method, but when there are several it makes a big difference.

One might ask why not to use inheritance for this, but that would be impossible because:

a) the class delegates to three different objects, and
b) the class already inherits from AbstractTableModel, which provides some default Swing table model functionality.

Marius showed another approach that delegates to the other object in the method_missing function.  This would also work, but has the following issues:

a) It determines whether or not the delegate object can handle the message by calling its <i>respond_to</i> method. If that delegate intended to handle the message in its method_missing function, respond_to will return false and the caller will not call it, calling its superclass' method_missing instead.

b) The delegating object will itself not contain the method.  (Maybe the method_missing handling adds a function to the class, but even if it does, that function will not be present when the class is first loaded.)  So it too will return a misleading false if respond_to is called on it.

c) In addition to not communicating its capabilities to objects of other classes, it does not communicate to the human reader what methods are available on the class.  One has to look at the class definition of the delegate object, and given Ruby's duck typing, that may be difficult to find. It could even be impossible if users of your code are passing in their own custom objects. This may not be problematic, but it's something to consider.  (I talk more about duck typing's occasional challenges at <a href="http://www.bbs-software.com/blog/2011/06/15/dependency-inversion-ruby-style/">Design by Contract, Ruby Style</a>.)

It was an interesting subject.  Thank you Marius!

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>698</wp:post_id>
		<wp:post_date><![CDATA[2012-09-13 11:02:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-13 11:02:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rubys-forwardable]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[Marius]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[marius@mlpinit.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.mlpinit.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[71.206.13.38]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-09-15 18:15:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-09-15 18:15:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the post Keith!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Hello, Nailgun; Goodbye, JVM Startup Delays</title>
		<link>http://blog.bbs-software.com/index.php/2012/09/15/hello-nailgun-goodbye-jvm-startup-delays/</link>
		<pubDate>Sat, 15 Sep 2012 02:04:10 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=743</guid>
		<description></description>
		<content:encoded><![CDATA[One of the frustrations of working with JRuby is that every single time you run it, you start a whole new JVM. This takes seconds:

[code]
&gt;time jruby -e 'puts(123)'
123
jruby -e 'puts(123)'  1.94s user 0.11s system 178% cpu 1.144 total
[/code]

If you're using JRuby, and working with gem, rspec, irb, and other JRuby tools, this waiting time adds up and can be frustrating.
<h3>Enter Nailgun</h3>
<a title="http://www.martiansoftware.com/nailgun/" href="http://www.martiansoftware.com/nailgun/">Nailgun</a> is a Java utility that starts up a JVM and behaves like a server, accepting client requests to run Java based software on it. The JRuby team did a great job of integrating it into JRuby, making it trivially simple to use.

<!--more-->

To start the server, just run:

[code]
jruby --ng-server  # 'jruby' can be replaced with 'ruby' if running in rvm
[/code]

To connect to it, all you need to do is add "--ng" to the JRuby command or the JRUBY_OPTS environment variable's value. If you always wanted to use it, you could just include "--ng" in the export of JRUBY_OPTS in your startup script (.bashrc, .zshrc, etc.). However, this may not be a good idea. The Nailgun web site says "...it's not secure. Not even close". In addition, you probably want longer running tasks to have their own JVM's. This being the case, it can be better to default to <em>not</em> use Nailgun, instead specifying the use of it when needed.

In my work, I found that I always wanted to use Nailgun with utilities (rspec, irb, etc.), but that I couldn't use it with my gem's bin executable running in 1.9 mode. (I believe this is fixed in a 1.7 version of JRuby.) So here's what I did...

I created the scripts below in my ~/bin directory. (I use a ~/bin directory for home grown scripts and such that I don't want to bother installing in a root-owned directory.)

<hr />

<em>ngs</em>, to run the Nailgun server:

[code]
JRUBY_OPTS=&quot;&quot; ruby --ng-server
[/code]

I set JRUBY_OPTS to the empty string because my default setting is "--1.9", and at this version, the Nailgun server will not start when JRUBY_OPTS is nonempty or when certain options are specified on its command line. (See issues <a href="http://jira.codehaus.org/browse/JRUBY-6246">6246</a>, <a href="http://jira.codehaus.org/browse/JRUBY-5611">5611</a>, and <a href="http://jira.codehaus.org/browse/JRUBY-6251">6251</a>).

<hr />

<em>ng</em>, to run any JRuby command with Nailgun (used by ngem, etc.):

[code]
JRUBY_OPTS=&quot;$JRUBY_OPTS --ng&quot;  $*
[/code]

<hr />

<em>nruby</em>, to run the JRuby interpreter itself:

[code]
JRUBY_OPTS=&quot;$JRUBY_OPTS --ng&quot; ruby $*
[/code]

<hr />

<em>ngem</em>:

[code]
ng gem $*
[/code]

<hr />

<em>nrspec</em>:

[code]
ng rspec $*
[/code]

<hr />

<em>nirb</em>:

[code]
ng irb $*
[/code]

<hr />

This can also be done with rails, of course, but I haven't tested it thoroughly, so I suggest keeping an eye on things to make sure it works ok.

<em>nrails</em>:

[code]
ng rails $*
[/code]

<hr />

To quickly create these all, change to the directory that will contain them and run this script:

[code]
echo 'JRUBY_OPTS=&quot;&quot; ruby --ng-server'         &gt; ngs;       chmod +x ngs
echo 'JRUBY_OPTS=&quot;$JRUBY_OPTS --ng&quot; $*'       &gt; ng;        chmod +x ng
echo 'JRUBY_OPTS=&quot;$JRUBY_OPTS --ng&quot; jruby $*' &gt; nruby;     chmod +x nruby
echo 'ng rspec $*'                            &gt; nrspec;    chmod +x nrspec
echo 'ng irb $*'                              &gt; nirb;      chmod +x nirb
echo 'ng gem $*'                              &gt; ngem;      chmod +x ngem
echo 'ng rails $*'                            &gt; nrails;    chmod +x nrails

# Rehash reloads binaries from your path to be available for autocompletion
# on the command line in this shell.
rehash
[/code]

It would probably be simpler to create aliases instead of shell scripts, but I like being able to easily modify these kinds of scripts, sometimes with multiple lines, so this works well for me.

If you'll be executing the code below, make sure you've started the Nailgun server, either using the <em>ngs</em> script we created, or the command shown at the top of the article.

The scripts will not <em>always</em> work. When the arguments include quoted strings that include spaces, things may get messed up. Here's an example:

[code]
&gt;nruby -e &quot;puts 123&quot;  # (produces blank string)

&gt;nruby -e &quot;puts(123)&quot;
123
[/code]

Running the same trivial Ruby script as before, but with Nailgun this time, we get:

[code]
&gt;time nruby -e 'puts(123)'
123
nruby -e 'puts(123)'  0.00s user 0.01s system 3% cpu 0.197 total
[/code]

I recently needed to do some cycles of delete gem; build gem; install gem. This was easy to put together on a single line so I could just scroll up my history to repeat the process. Here are the timings, first without, and then with, Nailgun. I've removed irrelevant output for brevity's sake.

<em>Without</em> Nailgun:

[code]
&gt;time (echo Y | gem uninstall life_game_viewer; gem build *gemspec; gem install life_game_viewer)
31.74s user 1.29s system 235% cpu 14.021 total
[/code]

<em>With</em> Nailgun:

[code]
&gt;time (echo Y | ngem uninstall life_game_viewer; ngem build *gemspec; ngem install life_game_viewer)
0.01s user 0.02s system 0% cpu 3.073 total
[/code]

Pretty amazing, eh?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>743</wp:post_id>
		<wp:post_date><![CDATA[2012-09-15 02:04:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-15 02:04:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-nailgun-goodbye-jvm-startup-delays]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Stealth Conditionals in Ruby</title>
		<link>http://blog.bbs-software.com/index.php/2012/09/16/stealth-conditionals-in-ruby/</link>
		<pubDate>Sun, 16 Sep 2012 07:24:04 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=787</guid>
		<description></description>
		<content:encoded><![CDATA[When I first encountered the Ruby language in 2001, after working with Java, C++, and C for several years, I fell in love with it.  How expressive, concise, clear, and malleable it is.  A few years ago I even named a slide show <a href="https://speakerdeck.com/u/keithrbennett/p/what-i-love-about-ruby">What I Love About Ruby.</a>  I use it for presentations on beginning Ruby for novices.

But there's one thing in Ruby I haven't gotten used to...the widespread use of what I call <em>stealth conditionals</em>, conditionals that are "hidden" in the middle of a one line statement, as in:

[code lang="ruby"]
do_something(foo, bar, baz) if some_condition
[/code]

I strongly believe that just as we software developers strive to create user interfaces that communicate structure and content with visual cues to our users, we should do the same for each other in our source code.

<!--more-->

The beginning of a line of source code has a special status and importance.  As the eyes scan down a section of code, the most prominent text is the text that begins each line.

The opportunity cost of embedding a conditional in the middle of a statement is the lost opportunity to communicate that conditional more clearly and strongly. The result is that the reader is required to work harder to understand the flow of execution.

The classical alternative to the above would be:

[code lang="ruby"]
if some_condition
  do_something(foo, bar, baz)
end
[/code]

Clearly, the presence of the if at the beginning of the line, and the indentation of the function call do a better job of communicating the conditional nature of the code. However, I realize there may be times when a statement is so simple that more than one line feels excessive. In these cases, we do have this as an alternative:

[code lang="ruby"]
if some_condition; do_something(foo, bar, baz) end
[/code]

This is 50 characters long, while the original was 45 characters long.  For an extra 5 characters, we get to see the conditional nature of the statement on the left margin of the line.  To me, this is a cost that is small compared with its benefit.

That said, sometimes the stealth placement is clearer.  For example, below I use the two different strategies in the two unless sections to illustrate. I've intentionally disabled the Ruby color coding because we cannot count on it being present, and we want our code to be maximally understandable either way.

[code]
    # Process the row above
    unless at_top_edge
      neighbors &lt;&lt; [row_above, col]
      unless at_left_edge;  neighbors &lt;&lt; [row_above, col_to_left]  end
      unless at_right_edge; neighbors &lt;&lt; [row_above, col_to_right] end
    end

    # Process the row below
    unless at_bottom_edge
      neighbors &lt;&lt; [row_below, col]
      neighbors &lt;&lt; [row_below, col_to_left]   unless at_left_edge
      neighbors &lt;&lt; [row_below, col_to_right]  unless at_right_edge
    end
[/code]

In this case, I prefer the lower approach.  The special status of the left margin is best used to communicate the commonality of the three lines' operations.  The <em>unless</em> modifier clause is pretty clear, especially since I've added an extra space to set it apart from the expression before it.  By the way, the adding of an extra space or two before a stealth conditional would probably be a good convention to follow.

I do believe the case above to be the exception rather than the rule.  Often, the line containing the stealth conditional is one of several in a method, and those lines don't have much in common.  In those cases, I recommend putting the <em>if</em> or <em>unless</em> first.


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>787</wp:post_id>
		<wp:post_date><![CDATA[2012-09-16 07:24:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-16 07:24:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[stealth-conditionals-in-ruby]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wordpress Administration with Ruby</title>
		<link>http://blog.bbs-software.com/index.php/2012/09/23/wordpress-administration-with-ruby/</link>
		<pubDate>Sun, 23 Sep 2012 06:25:44 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=815</guid>
		<description></description>
		<content:encoded><![CDATA[(This article is about the <em>wordpress_config_parser</em> gem, whose project page is at <a href="https://github.com/keithrbennett/wordpress_config_parser" title="https://github.com/keithrbennett/wordpress_config_parser" target="_blank">https://github.com/keithrbennett/wordpress_config_parser</a>.)


<h2>The Problem</h2>

I've just consolidated blogs, email accounts, and web site data from multiple hosting companies onto a single hosting account.  The Wordpress blogs are the most important assets, and I want a good backup plan for them.

After some research, I find that Wordpress data consists of files in the file system (e.g. photos), plus data in a data base, usually MySQL.

For the files, I make the whole shell account a big git repository, and use a Git host on the cloud to be the <em>origin</em> repo.

For the database, though, it's not so simple.  Most of the information online points to the use of the PhpMyAdmin web app to perform a backup.  However, I want this backup to be automated, repeatable, and self documenting. I need something that can be run from the command line. What to do?

<h2>The Solution</h2>

<!--more-->

My research indicates that there is a command line alternative, <em>mysqldump</em> (which is probably the command called by phpMyAdmin).  mysqldump generates a text file containing all the SQL commands necessary to reconstruct the data base with the identical schema and data.

Mysqldump's parameters include user id, password, host, and data base name.  These are already available in plain text in the blog's <em>wp-config.php</em> configuration file.  I'd like to read that file dynamically, rather than copying the data somewhere else, or requiring that it be provided on the command line (which would make it visible in the shell's command history).

With this as a goal, I wrote the <em>wordpress_config_parser</em> gem, which reads the wp-config.php file and makes its values accessible in a trivially simple way:

[code lang="ruby"]
require 'wordpress_config_parser'
parser = WCParser.new('/Users/me/public_html/blog')
db_name = parser.db_name
# ...
[/code]

This approach is then used to build the mysqldump command line dynamically.

For the output SQL file, since my whole hosting directory tree is one large git repo, I can use the same file name every time I call mysqldump, and git will store the changes in a way that are easy to inspect and reconstruct.

Since I'm scripting this task, after the SQL file is generated, I might as well include the git <em>add</em>, <em>commit</em>, and <em>push</em> commands as well.

It turns out that mysqladmin will include a date/time stamp in the SQL output file, so even if there are no changes in the data base, two successive runs will produce nonidentical files.  At first, this seemed like an annoyance, but on further thought I realized that wouldn't be such a bad thing -- it would demonstrate that at that later time, the data was <em>still</em> the same as at the earlier time, something that could be guessed at without the extra commit but never proven.

The script I'm currently using is in the project's sample_scripts directory <a href="https://github.com/keithrbennett/wordpress_config_parser/blob/master/sample_scripts/backup-wordpress-db.rb" title="https://github.com/keithrbennett/wordpress_config_parser/blob/master/sample_scripts/backup-wordpress-db.rb">here</a>. It's a bit bare, but illustrates how to get things done. If you want to run it, be sure to read the <em>Assumptions</em> section in the comments, and change your environment or the script as necessary. Don't forget to gem install the gem:

[code]
gem install wordpress_config_parser
[/code]

Next on the to do list is automating the periodic running of this script with cron or a Ruby equivalent.

- Keith
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>815</wp:post_id>
		<wp:post_date><![CDATA[2012-09-23 06:25:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-23 06:25:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wordpress-administration-with-ruby]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[ZPH]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zander@civet.ws]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[24.231.30.253]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-24 02:16:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-24 07:16:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice!  I'm a fan of coordinating it in Ruby :).

I've had this as a problem for myself recently.  I solved it by adding a cron job on the server w/ blog to mysqldump once a day into the base folder above the WP blog (ie if WP is at BLOGNAME/blog then the dumps are saved at BLOGNAME/archives, which should be out of region that can be served by webserver).

Then the whole BLOGNAME folder is a git repo and is synch'd to offsite once a day.

Long term, I'm sure there is a more elegant solution but it's working for now!

Also, hello from another person in your general neck of the woods, WV.  It's remarkably hard to find tech folk around this area (OH/WV border).]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://about.me/keithrbennett</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.255.28.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-24 11:12:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-24 16:12:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Zander -

Thanks for the tip.  I do something like that -- I have my entire shell account, including this blog and my TechHumans blog, in a single git repo. But I only do the dump and commit on demand; it would be better to make it more automatic like you're doing.

I was paying GitHub for private repos until I found out that Bitbucket has private repos for free.  So I use that, it works nicely, and I save some bucks.

I think we may have met...I attend Ruby technical community events all over, including Pittsburgh and Columbus, and attended a Southeast Linuxfest in Spartanburg, SC once.  Maybe at one of these?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>41</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Intro to Functional Programming in Ruby</title>
		<link>http://blog.bbs-software.com/index.php/2012/11/05/intro-to-functional-programming-in-ruby/</link>
		<pubDate>Mon, 05 Nov 2012 22:03:15 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=847</guid>
		<description></description>
		<content:encoded><![CDATA[Ruby is a flexible and versatile language.  Although it's almost always used as an object oriented language, it can be used for functional programming as well.

In versions prior to Ruby 1.8, doing so was more awkward because there would be a lot of <code>lambda</code>s cluttering the code.  In 1.9, however, we have the <code>-></code> shorthand, which makes functional style code more concise and more similar to traditional FP languages.

This post is inspired by <a href="https://github.com/jimweirich">Jim Weirich</a>'s keynote at RubyConf in Denver last Friday (Nov. 2, 2012), in which he abundantly illustrated Ruby's FP abilities.  His code looked so different from most Ruby code that one attendee entering late whispered to the person next to him, <em>what language is that?</em>

Here's a walk through some basic functional programming in Ruby.  A file containing the source code for this article, and some <code>puts</code> statements to illustrate the code, is <a href="https://github.com/keithrbennett/fp-playground/blob/master/fp-intro.rb">here</a>.

We'll start with some simple examples and work up to creating the execution of a workflow defined as an array of lambdas.

<!--more-->

<hr><h5>An "Add" Function</h5>

First, here's a simple function that returns the sum of two numbers.

[code lang="ruby"]
add = -&gt;(x, y) { x + y }
[/code]

The lvalue is <code>add</code>, and is a variable that will contain a reference to the lambda, or function.

The rvalue is <code>->(x, y) { x + y }</code>, and represents a function.

The <code>->()</code> indicates that this a function, and the terms inside the parentheses are the arguments it expects. The code within the curly braces is the body of the function.  A very important thing to keep in mind is that the function is created and returned, but not evaluated (called).  It could be considered a function literal, as we have array, hash, and regex literals in Ruby.  In this case, we're assigning it to the variable <code>add</code>.

This is called like a regular function, except that we need a dot after the variable name to tell the Ruby interpreter that this is a proc and not a class' member function.  Another way of looking at it is that the dot is a shorthand for <code>.call</code>, which was required for calling a lambda in pre-1.9 versions of Ruby.  This is how it would look in irb:

[code lang="ruby"]
1.9.3-p286 :001 &gt; add = -&gt;(x, y) { x + y }
 =&gt; #&lt;Proc:0x007fdddb25c680@(irb):1 (lambda)&gt; 
1.9.3-p286 :002 &gt; add.(3,4)
 =&gt; 7 
[/code]

A better implementation of add, that would take a variable number of arguments is:

[code lang="ruby"]
add = -&gt;(*numbers) { numbers.inject(:+) }
[/code]

<hr><h5>A "Multiple" Function</h5>

Now, let's create a function that returns a function that will return multiples of a number:

[code lang="ruby"]
mult = -&gt;(multiplier) { -&gt;(n) { multiplier * n } }
[/code]

The function will be stored in the <code>mult</code> variable.  We can then call <code>mult</code> to get a function that will double its argument:

[code lang="ruby"]
double = mult.(2)
[/code]

<code>mult</code> and <code>double</code> are instances of class <code>Proc</code>.  We can now call double:

[code lang="ruby"]
double.(111)  # 222
[/code]

Similarly, we can create a function named <code>power</code> that raises a number to a specified power, and then, using <code>power</code>, create functions <code>square</code> and <code>square_root</code> that return the square and square root of a number, respectively:

[code lang="ruby"]
power = -&gt;(exponent) { -&gt;(n) { n ** exponent } }
square = power.(2)
square_root = power.(0.5)
[/code]

This practice of calling a function that takes <code>n</code> parameters to create a new function that only requires <code>< n</code> (some of) those parameters is called <em>currying</em>.

<hr><h5> A "Hypotenuse" Function</h5>

We can now assemble a hypoteneuse function like this:

[code lang="ruby"]
hypoteneuse = -&gt;(a, b) { square_root.(square.(a) + square.(b)) }
[/code]

<hr><h5>A "Chain" Function</h5>

Now let's compose a function that will chain functions together:

[code lang="ruby"]
chain = -&gt;(*procs) { -&gt;(x) { procs.inject(x) { |x, proc| proc.(x) } } }
[/code]

It's a little complex, but if we go from the inside out it's more manageable:

[code lang="ruby"]
procs.inject(x) { |x, proc| proc.(x) }
[/code]

<code>procs</code> is an array of functions.  We call <code>inject</code> to successively call each function with the value returned by the previous one.  Finally, the last return value (stored in <code>x</code>) is returned.

[code lang="ruby"]
-&gt;(x) { *** }
[/code]

In the code above I've replaced the previous code example with <code>***</code> so you can see what was added to it.  We've wrapped the expression in a lambda that expects a single argument that will be referred to in the lambda as <code>x</code>.

[code lang="ruby"]
chain = -&gt;(*procs) { *** }
[/code]

Here, we define a function named <code>chain</code> that will take 0 or more arguments and assemble them into an array named <code>procs</code>, which will then be accessible to the <code>inject</code> in the inner code.  Using the chain function, we can create a function that doubles then squares an argument:

[code lang="ruby"]
double_then_square = chain.(double, square)
[/code]

<hr><h5>A File Writer and CSV Parser</h5>

For later examples, we'll need a file containing the text "fruit,mango".  Let's write a lambda that will do that, and then call it:

[code lang="ruby"]
write_file = -&gt;(filespec, contents) { File.write(filespec, contents) }
write_file.('favorites.txt', 'fruit,mango')
[/code]

Now let's write a trivially simple (and admittedly inadequate for real world use) CSV (comma separated values) parser lambda:

[code lang="ruby"]
parse_csv = -&gt;(string) { string.split(',') }
[/code]

<hr><h5>A "Favorite" Class</h5>

For the purposes of this example, we'll need a <code>Favorite</code> class and a formatter and a parser for it:

[code lang="ruby"]
Favorite = Struct.new(:type, :instance)

format_favorite = -&gt;(favorite) { &quot;Favorite #{favorite.type} is #{favorite.instance}&quot; }

parse_favorite = -&gt;(string) {
  fav = Favorite.new
  fav.type, fav.instance = *parse_csv.(string)
  fav
}
[/code]

<hr><h5>Assembling a Workflow</h5>

First let's write a couple of utility functions:

[code lang="ruby"]
read_file_lines = -&gt;(filespec) { File.readlines(filespec) }
first = -&gt;(object) { object.first }
[/code]

Here is the workflow we have defined.  Note that although it is executable code, it is implemented as an array of objects.

[code lang="ruby"]
transformations = [
  read_file_lines,
  first,
  parse_favorite,
  format_favorite
]
[/code]

Now we curry <code>chain</code> to create a function <code>transform_chain</code> that will execute the transformations we want:

[code lang="ruby"]
transform_chain = chain.(*transformations)
[/code]

Then, we call the function to get the final result:

[code lang="ruby"]
result = transform_chain.('favorites.txt')
# Result will be: &quot;Favorite fruit is mango.&quot;
[/code]

This could also have been expressed more succinctly by removing the <code>transform_chain</code> intermediate variable:

[code lang="ruby"]
result = chain.(*transformations).('favorites.txt')
[/code]


<hr><h5>Conclusion</h5>

You may be wondering about the value of functional programming, thinking that it's merely an alternate implementation, maybe even a regression from object oriented programming.  Unfortunately, I'm not that knowledgeable about it and don't have too much wisdom to offer.  However, I can guess at these advantages:

<ol>

	<li>One of the challenges of multithreaded programming is minimizing the risk that running code in one thread modifies data used by another.  Objects are designed to carry state with them, whereas functions typically do not (or if they do, it is nonmodifiable state not accessible to code outside of the function).  Using functions rather than conventional objects may therefore be a better choice in cases where this is important.
</li>

	<li>ETL products on which I've worked use objects with a <code>run</code> method for assembling workflows.  This is nice because they can carry state (this can be a good thing too) and can enjoy the design benefits of inheritance.  However, the the lambda approach is a more lightweight method.
</li>

	<li>Because lambdas are simply objects in memory, and are not bound to classes, they are much more easily manipulable.  The resulting metaprogramming possibilities dwarf Ruby's built-in metaprogramming, itself no slouch.  Of course, leveraging the "code is data" approach of lambdas may result in code that is more complex and obtuse. </li> 
</ol>

<br/>
As always, it depends.

<hr>

Feel free to comment, enlighten, correct, etc.

- <a href="http://about.me/keithrbennett">Keith Bennett</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>847</wp:post_id>
		<wp:post_date><![CDATA[2012-11-05 17:03:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-05 22:03:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[intro-to-functional-programming-in-ruby]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Building A Great Ruby Development Environment and Desktop with Linux Mint 13 &quot;Maya&quot; Mate</title>
		<link>http://blog.bbs-software.com/index.php/2012/11/09/linux-mint-13-maya-with-mate-a-great-ruby-development-environment-and-desktop/</link>
		<pubDate>Fri, 09 Nov 2012 18:18:48 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=963</guid>
		<description></description>
		<content:encoded><![CDATA[The purpose of this article is to provide for you a clear and simple guide to setting up a nice Linux environment for Ruby software development and more.  

I've been using Linux as a development environment on and off for a decade.  In recent years I've leaned towards Mac OS, partly because I've been very disappointed in the Linux desktops' progress (or lack of it).  Nevertheless, I use Linux on all my old PC laptops, and in VM's on my Macs.  Enter Linux Mint, version 13...

I really like the new Linux Mint 13 Mate distro and decided to install it on several systems.  The desktop is simple, intuitive, and clean, and underneath it's Ubuntu. Unlike the Ubuntu distro, however, Mint includes codecs that are needed for multimedia play.  More information about multimedia software and the Mint installation itself is at <a href="http://www.howtoforge.com/the-perfect-desktop-linux-mint-13-maya">http://www.howtoforge.com/the-perfect-desktop-linux-mint-13-maya</a>. Besides functioning as a software development environment, another use for my Mint systems is to drive my HDTV with content from TV web sites, Hulu Plus, YouTube, Vimeo, etc.  Unfortunately, Netflix streaming video does not work on Linux.

At some point I'd like to take the time to learn Chef and automate the process, but until then, I figured I'd at least document everything I did to reduce the time and effort with each new installation. 

This article describes the development environment I settled on for now, and how to replicate it.  It's intended to enable you to get a high quality system up to speed as quickly as possible.  A lot of my choices are subjective (e.g. <code>zsh</code> rather than <code>bash</code>), so feel free to skip or modify anything. I assume you have a minimal understanding of Linux, and I omit some detail that might be needed by Linux beginners. Where version numbers are embedded in file names, those versions may differ at the time of your installation, so modify the names accordingly.

Following is a step by step guide. Although I installed Linux Mint, most or all of these steps should work on standard Ubuntu distributions too.

<!--more-->

<hr>

<h3>Download the ISO</h3>

The first step is to download the ISO from <a href="http://www.linuxmint.com/download.php" title="http://www.linuxmint.com/download.php">http://www.linuxmint.com/download.php</a>, and burn a DVD or save it somewhere.

<hr>

<h3>Install the OS</h3>

Install the OS from the DVD or disk image.

<hr>

<h3>Update the Installed Software</h3>

Update by clicking the shield icon on the lower right of the desktop.  <em>Select All</em> and <em>Install the Updates</em> to update the updater, then do it again to install the updates themselves.

<hr>

<h3>Install Extra Packages</h3>

Linux Mint is based on Ubuntu and therefore uses apt-get/aptitude/synaptic for software package management.  I use the command line apt-get for simplicity.  I install the following extra software:

<ul>
        <li><strong>ant</strong> - for building Clojure and other Java based software</li>
        <li><strong>chromium-browser</strong> - for an alternative to Firefox, this is the browser on which Google's Chrome is based</li>
        <li><strong>curl</strong> - for RVM installation and general use</li>
        <li><strong>fldiff</strong> - graphical diff tool for files and directories
        <li><strong>g++</strong> - for compiling C++ source code</li>
        <li><strong>gedit</strong> - a simple graphical editor</li>
        <li><strong>gftp</strong> - excellent graphical app for ftp operations, can do sftp too</li>
        <li><strong>gitk</strong> - graphical Git repo visualizer</li>
        <li><strong>gnome-alsamixer</strong> - volume control; this enabled me to increase maximum volume for tv</li>
        <li><strong>libreadline-dev</strong> - for command line history editing</li>
        <li><strong>libyaml-0-2</strong> - YAML support</li>
        <li><strong>MySQL, Postgres, SQLite</strong> - plus supplementary software and Postgres admin app</li>
        <li><strong>ncftp</strong> - an excellent full screen but text mode ftp client, can use this when logging into the system with ssh in a terminal</li>
        <li><strong>openssh-server</strong> - for SSH access to this machine</li>
        <li><strong>parcellite</strong> - multi-entry clipboard</li>
        <li><strong>rlwrap</strong> - adds readline support, used for Clojure REPL</li>
        <li><strong>skype</strong></li>
        <li><strong>stopwatch</strong> - a stopwatch/timer with lap field</li>
        <li><strong>vim-gnome</strong> - for a VIM editor with graphical abilities, run as <code>gvim</code></li>
        <li><strong>virtualbox</strong> - for virtual machines</li>
        <li><strong>zsh</strong> - my preferred shell</li>
</ul>

Here's the command to install them:

[code]
sudo apt-get install \
     curl \
     zsh \
     gedit \
     ncftp \
     virtualbox \
     vim-gnome \
     openssh-server \
     mysql-server mysql-client \
     postgresql-9.1 postgresql-contrib postgresql-doc postgresql-server-dev-9.1 pgadmin3 \
     sqlite3 libsqlite3-dev \
     g++ \
     libreadline-dev \
     skype \
     parcellite \
     stopwatch \
     gftp \
     gitk \
     gnome-alsamixer \
     chromium-browser \
     ant \
     libyaml-0-2 \
     rlwrap
[/code]

<hr>

<h3>Desktop and Panel Shortcuts</h3>

For each app you want (e.g. Firefox, Chromium and Terminal), find it in the main menu and right click on it to get the menu to make links on desktop and panel.

<h3>Change Default Shell to ZShell</h3>

Make sure zsh was installed successfully:

[code]
which zsh
[/code]

This command should return <code>/usr/bin/zsh</code>; if it returns nothing, zsh was not installed.

Run the <code>chsh</code> command to change the shell, specifying <code>/usr/bin/zsh</code> as your desired shell.  

Log out, then log in again.

<hr>

<h3>Git Configuration</h3>

Configure git, replacing the dummy data in the example commands with your real name and email address:

[code]
git config --global user.name &quot;First M. Last&quot;
git config --global user.email &quot;myaddress@domain.com&quot;
git config -l | grep user  # to list git variables to check that changes were made as intended
[/code]

<hr>

<h3>Adobe Acrobat Reader</h3>

Go to the Acrobat Reader "Other Downloads" page at <a href="http://get.adobe.com/reader/otherversions/">http://get.adobe.com/reader/otherversions/</a>.  Select Linux, your preferred language, and then the .deb file.  Download it, then open it to install the software.

<hr>

<h3>Postgres Configuration</h3>

I use Postgres because it's a great open source data base, and so that I'm using the same data base as Heroku.  The script below will initialize Postgres with what I need to run a sample Rails app.  Provide values for the environment variables at the top of the code fragment below. (Of course, use whatever <code>create database</code> commands you need; you might need more, or none, or no production data base, or want a different naming convention, etc.)  

[code]
# Fill in the appropriate values to the right of the equal signs below.
POSTGRES_USER_PASSWORD=
USERNAME=
PASSWORD=
APPNAME=

DEVAPPNAME=&quot;$APPNAME&quot;_dev
TESTAPPNAME=&quot;$APPNAME&quot;_test
PRODAPPNAME=&quot;$APPNAME&quot;_prod

PSQL_CMD=$(cat &lt;&lt;EOF
 
alter role postgres with password '$POSTGRES_USER_PASSWORD';
create role $USERNAME with password '$PASSWORD';
alter role $USERNAME with login;
create database $DEVAPPNAME with owner $USERNAME;
create database $TESTAPPNAME with owner $USERNAME;
create database $PRODAPPNAME with owner $USERNAME;
EOF
)


echo $PSQL_CMD | sudo -u postgres psql
[/code]

<hr>

<h3>Downcase Directory Names</h3>

I have an aversion to capitalized directory names, since I spend a lot of time on the command line and don't really need or want the minimal readability improvement of capitalized names.  I'm always downloading stuff, so I rename the <code>Downloads</code> folder to <code>downloads</code>.  I also use the <code>documents</code> directory a lot, so I downcased that as well.

[code]
mkdir ~/downloads
mv ~/Downloads/* ~/downloads
mv ~/Documents ~/documents
[/code]

Go to Firefox, select menu <em>Edit</em>, then <em>Preferences</em>, select <em>Save files to</em>, click the <em>Browse</em> button, then select the newly created <code>downloads</code> folder.

Then delete the <code>Downloads</code> directory:

[code]
rmdir ~/Downloads
[/code]

<hr>

<h3>Modify Terminal For RVM Usage</h3>

RVM uses shell magic to do its thing, and in order for it to work, the shell in which it is run needs to be a login shell.  To accomplish this, do the following:

Run the Terminal application.  Then, from the menu, select <em>Edit</em>, then <em>Profile Preferences</em>, then select the <em>Title and Command</em> tab and enable <em>Run command as a login shell</em>.

<hr>

<h3>Install RVM, Rubies, and Gems</h3>

You might want to check the <a href="https://rvm.io/rvm/install/">RVM web site</a> for the most current installation information, but at the time of this writing (November 2012) the command below is the recommended way:

[code]
\curl -L https://get.rvm.io | bash -s stable --ruby
[/code]

This will install RVM and a current stable MRI Ruby.  Below we'll do some other things:

<ul>	<li>install <a href="http://jruby.org/">JRuby</a>, Ruby implementation for the Java Virtual Machine, my user group presentation slides and audio <a href="http://www.bbs-software.com/blog/2012/09/04/jruby-presentation-northern-virginia-ruby-user-group/">here</a>)</a></li>
	<li>install Rails for both MRI Ruby and JRuby</li>
	<li>create aliases 1.9 and jruby for easier typing</li>
	<li>make MRI Ruby 1.9 the default Ruby for new shells</li>
</ul>

Open a new terminal, or source the startup shell command (e.g. <code>./zshrc</code>).  Then:

[code]
rvm alias create 1.9 ruby-1.9.3-p385
rvm --default 1.9
gem install rails

rvm install jruby
rvm alias create jruby jruby-1.7.2
rvm jruby
gem install rails
[/code]

<hr>


<h3>Java</h3>

Mint has an open source Java implementation, but I find the Oracle JDK's to be more problem-free.  If you want to install Oracle's Java, download the JDK from:  <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a>.  Then, install it in <code>/opt</code> and create a symbolic link to it named <code>current</code>.

[code]
sudo mkdir /opt/java
cd /opt/java
tar xzf jdk*tar.gz # replace w/real filespec of downloaded Java

sudo ln -s /opt/java/jdk1.7.0_09 current  
[/code]

(Note: Due to recent security concerns with running Java in browsers, the following instructions should be avoided unless you really need it.)

For Java support in Firefox, create a symbolic link in the Firefox installation's <code>plugins</code> directory to the appropriate library.  On my system that would look like this:

[code]
sudo ln -s /opt/java/current/jre/lib/amd64/libnpjp2.so /usr/lib/mozilla/plugins

# You can also install the symbolic link in your user directory ~/.mozilla/plugins instead:
# mkdir -p ~/.mozilla/plugins
# ln -s /opt/java/current/jre/lib/amd64/libnpjp2.so ~/.mozilla/plugins
[/code]

To see if Java is working in your browser, you can view this page: <a href="http://www.java.com/en/download/testjava.jsp">http://www.java.com/en/download/testjava.jsp</a>.

<hr>

<h3>Modify .zshrc to Specify the Path and Prompt</h3>

I use a <code>~/bin</code> directory for miscellaneous executables that I want to keep in my user space:

[code]
mkdir ~/bin
[/code]

We'll want to modify the PATH to contain this directory and the Java executable directory.  Also, we define JAVA_HOME and JDK_HOME to be the Java software root; some software may look for these variables.

In addition, you'll probably want to redefine the terminal prompt to at least display the current directory. I define a prompt (<code>PS1</code> variable) below, but this PS1 syntax may not work for bash, and you may want to customize it to your own taste.  Mine displays the previous command's return value (0 for success, nonzero for failure), the time, the host name (convenient to differentiate from other hosts to which you may be logged in with ssh, etc.), and the current directory.

Edit <code>~/.zshrc</code> to make the above changes:

[code]
export JAVA_HOME=/opt/java/current
export JDK_HOME=$JAVA_HOME

export PATH=~/bin:$JAVA_HOME/bin:$PATH

export PS1=&quot;
[%?] %T `hostname` %B%d%b
&gt;&quot;
[/code]

<hr>

<h3>SSH Keys</h3>

Create ssh keys, then upload them to anywhere you'll need them (e.g. Github and Bitbucket).  You can provide a passphrase when asked, but it's not absolutely necessary.

[code]
ssh-keygen -t rsa
[/code]

<hr>

<h3>Heroku</h3>

Install Heroku Toolbelt from <a href="https://toolbelt.heroku.com" title="https://toolbelt.heroku.com">https://toolbelt.heroku.com</a>.  Then:

[code]
heroku login
heroku keys:add ~/.ssh/id_rsa.pub # upload ssh key to Heroku account
[/code]

<hr>

<h3>Vim Configuration</h3>

For vim, install the <a href="https://github.com/carlhuda/janus">Janus</a> extensions, which include <a href="http://www.vim.org/scripts/script.php?script_id=1658">NerdTree</a>:

[code]
curl -Lo- https://bit.ly/janus-bootstrap | bash
[/code]

<hr>

<h3>VMWare Fusion</h3>

If you're installing this as a VMWare virtual machine, download and install the VMWare Tools:

Go to the VMWare "Virtual Machine" menu, select "Install VMWare Tools".  This will download them to your Mac, and make them available to your VM as a logical mounted CD.  Do this to install them:

[code]
cd /opt
sudo tar xzf /media/VMware\ Tools/*gz
cd vmware-tools-distrib/
sudo ./vmware-install.pl
[/code]

<hr>

<h3>Flash</h3>

Flash is already installed, but an upgrade is available. Check <a href="http://www.adobe.com/software/flash/about/">http://www.adobe.com/software/flash/about/</a> and, if necessary, follow the link to the download page. Both Chromium and Firefox use (via links) a <code>libflashplayer.so</code> in <code>/etc/alternatives</code>, which points to <code>/opt/mint-flashplugin-11/libflashplayer.so</code>, so download the new package and copy the .so file there.

<hr>

<h3>Clojure</h3>

Download from <a href="http://clojure.org/downloads">http://clojure.org/downloads</a>.  Then...

[code]
cd /opt
sudo unzip clojure.zip # Replace clojure.zip with actual filespec
sudo ln -s /opt/clojure-1.4.0 /opt/clojure
cd /opt
sudo chown -R `whoami`:`whoami` clojure # need to change ownership in order to build w/ant
cd clojure
ant  # build it
[/code]

<hr>

<h3>Android</h3>

Android developer tools can be downloaded from <a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a>.

<hr>

<h3>Erlang OTP</h3>

If you'd like to download Erlang, you can do it at <a href="https://www.erlang-solutions.com/downloads/download-erlang-otp">https://www.erlang-solutions.com/downloads/download-erlang-otp</a>. You'll need to know which Ubuntu distribution you're downloading for; Linux Mint 13 is Ubuntu 12.04, and 14 is 12.10.

<hr>

<h3>Conclusion</h3>

I hope this has been helpful.  If you have any questions, corrections, suggestions, etc., feel free to comment.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>963</wp:post_id>
		<wp:post_date><![CDATA[2012-11-09 13:18:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-09 18:18:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux-mint-13-maya-with-mate-a-great-ruby-development-environment-and-desktop]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[ZPH]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zander@civet.ws]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[24.231.30.253]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-24 01:52:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-24 06:52:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice writeup!

A few tricks that I would add to it as someone frequently deploying my environment to new systems, use a dotfiles git repo to simplify the process :).  I have all dotfiles, zshrc, aliases, vim configs, etc saved in a git repo folder (though not yet on Github).  This makes it a matter of git clone REPO to setup a sane environment, paired with a few crude shell scripts to install basics &amp; swap to ZSH.

Another one that I need to get better about is breaking my dotfiles into logical subunits.  I'm good w/ my ZSHRC containing the basics and the remainder being 'required/included' from a zsh.d directory.  The ZSH.D dir has nicely segregated files that pertain to aliases, git aliases, fasd aliases, extra functions, etc.  Helps keep things logical and I need to work on that for my mess of a VIMRC =D.

Lastly, the RVM alias tool is very helpful.  Thanks for reminding me about it.

-Cheers]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[ZPH]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zander@civet.ws]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[24.231.30.253]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-24 01:54:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-24 06:54:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[One more that jumps to mind, ssh-copy-id for copying your public key over to other machines and appending it to appropriate auth file.  Makes public key security very simple :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>45</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://about.me/keithrbennett</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.255.28.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-24 11:05:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-24 16:05:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the tips.  If you ever make any of it public (in blog article, on Github, etc.), feel free to stop by and give us links.

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>43</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://about.me/keithrbennett</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.255.28.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-24 11:24:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-24 16:24:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for that tip too, Zander.

People, I recommend checking out Zander's blog.  It's at http://www.civet.ws/.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>44</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[Edmondner]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[edmondcrelm@mail.ru]]></wp:comment_author_email>
			<wp:comment_author_url>https://gigasoft.us/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[146.185.223.125]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-29 22:34:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-29 22:34:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[One of the most puzzling questions about the history of free and open source is this: Why did Linux succeed so spectacularly, whereas similar attempts to build a free or open source, Unix-like operating system kernel met with considerably less success? I don't know the answer to that question. But I have rounded up some theories, which I'd like to lay out here.  <a href="https://gigasoft.us/product/adobe_creative_suite_6_design_standard_student_and_teacher_edition/" rel="nofollow">buy Adobe Creative Suite 6 Design Standard Student and Teacher Edition</a>  If we're going to get any answers, we have to first break down this new offering to take a look at some of its key facets. Does the heart of OS X still reflect the light of Apple's long-lived gamechanging desktop? Or does this freshly polished gemstone mark the center piece of Apple's new crown jewel, a post-PC and Mac free line of iOS powered computers? You say Mac OS X Lion, I say OS X Lion And then, of course, I can create views, I can adjust them, I can say, "You know, I'm going to reduce the columns, adjust however I want. I want to add something more. I want to add the...I don't know, a modified date. Apply." And you'll see that my view at the top right here has a little star. So, I can go ahead and just save the view with the modifications that I have done so now it's always going to have the modified date as well. So, a lot easier for people to work with. Very, very, very nice experience in my opinion. Publishing Sites]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Hello world!</title>
		<link>http://blog.bbs-software.com/index.php/2017/05/30/hello-world__trashed-2/</link>
		<pubDate>Tue, 30 May 2017 20:50:46 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://blog.bbs-software.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[Welcome to WordPress. This is your first post. Edit or delete it, then start writing!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1135</wp:post_id>
		<wp:post_date><![CDATA[2017-05-30 20:50:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-30 20:50:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world__trashed-2]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1496177776]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_comments_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:1;s:1:"1";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[A WordPress Commenter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wapuu@wordpress.example]]></wp:comment_author_email>
			<wp:comment_author_url>https://wordpress.org/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-30 20:50:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-30 20:50:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, this is a comment.
To get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.
Commenter avatars come from <a href="https://gravatar.com" rel="nofollow">Gravatar</a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[post-trashed]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Hello world!</title>
		<link>http://blog.bbs-software.com/index.php/2017/05/29/hello-world__trashed/</link>
		<pubDate>Mon, 29 May 2017 20:20:59 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://blog.bbs-software.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[Welcome to WordPress. This is your first post. Edit or delete it, then start writing!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1136</wp:post_id>
		<wp:post_date><![CDATA[2017-05-29 20:20:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-29 20:20:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1496089572]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_comments_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:1;s:1:"1";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[A WordPress Commenter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wapuu@wordpress.example]]></wp:comment_author_email>
			<wp:comment_author_url>https://wordpress.org/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-29 20:20:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-29 20:20:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, this is a comment.
To get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.
Commenter avatars come from <a href="https://gravatar.com" rel="nofollow">Gravatar</a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[post-trashed]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Copying (RVM) Data Between Hosts Using ssh, scp, and netcat</title>
		<link>http://blog.bbs-software.com/index.php/2012/12/29/copying-rvm-data-between-hosts-using-ssh-scp-and-netcat/</link>
		<pubDate>Sat, 29 Dec 2012 19:24:04 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=1135</guid>
		<description></description>
		<content:encoded><![CDATA[Occasionally I need to copy nontrivial amounts of data from one machine to another.  I describe in this article three approaches to doing this on the command line, and explain why the third, using ssh and tar, is the best one.

As test data, I decided to use RVM's hidden control directory, <code>~/.rvm</code>. I deleted my non-MRI 1.9 rubies to reduce the transfer size.

I haven't tested this, but I imagine that for installing rvm on multiple similar systems (e.g. those with compatible native compilers, libraries, etc.), it may be possible to save a lot of time by a full install of rubies and gems on only one machine, then on the others doing a minimal install of rvm and then copying the fully populated .rvm directory.

<h2>Not So Good -- Using scp</h2>

<em>Note: This approach requires that the ssh port (22) be open on the destination host, and sshd is running.  On the Mac, this is done by enabling "Remote Login" in the Sharing Preferences.
</em>

A very simple way to do this is to use <code>scp</code> (secure copy, over ssh) with the <code>-r</code> (recursive) option. For example:

[code lang="shell"]
scp -r source_spec destination_spec
[/code]

...where source_spec and destination_spec can be local or remote file or directory specifications. (I'll use the term <em>filespec</em> to refer to both.) Remote filespecs should be in the format <em>user@host:filespec</em>. Don't forget the colon, or the copy will be saved to the local host with a strange name!  Here is an example that works correctly:

[code lang="shell"]
# To create ~/.rvm on the destination:
&gt;time scp -rq ~/.rvm kbennett@destination_host:~/temp/rvm-copy/using-scp/
Password:
scp -rq ~/.rvm kbennett@destination_host:~/temp/rvm-copy/using-scp/  25.38s user 40.99s system 3% cpu 31:12.66 total
[/code]

When I tried this, I was astonished to see that the destination directory consumed more than twice as much space as the original!  To easily get the amount of space consumed by a directory tree, with the size in human readable format, run <code>du -sh directory_name</code>.  For example:

[code lang="shell"]
# At the source:
&gt;du -sh .
427M    .

# At the destination:
&gt;du -sh .
1.1G    .
[/code]

<!--more-->

After some investigation I found that it was due to the fact that scp "follows" symbolic links.  That is, instead of creating a symbolic link on the destination, it makes a copy of the linked-to directory with the link name as the name of the containing directory.

For example, here are the ~/.rvm/rubies listings on the two machines:

[code lang="shell"]
# Source
&gt;ls -l
lrwxr-xr-x  1 keithb  keithb   41 Dec 28 21:45 1.9 -&gt; /Users/keithb/.rvm/rubies/ruby-1.9.3-p362
lrwxr-xr-x  1 keithb  keithb   41 Dec 28 21:45 default -&gt; /Users/keithb/.rvm/rubies/ruby-1.9.3-p362
drwxr-xr-x  8 keithb  keithb  272 Dec 26 16:51 ruby-1.9.3-p362

# Destination
&gt;ls -l
total 0
drwxr-xr-x  8 kbennett  staff  272 Dec 28 22:12 1.9
drwxr-xr-x  8 kbennett  staff  272 Dec 28 22:19 default
drwxr-xr-x  8 kbennett  staff  272 Dec 28 22:24 ruby-1.9.3-p362
[/code]

Entries with the letter "l" in the leftmost position of the line are symbolic links, and their listings show the "real" directories to which they refer.  In this case, those links were created by the first two rvm commands below:

[code]
&gt;rvm alias create 1.9 1.9.3-p362
Creating alias 1.9 for ruby-1.9.3-p362.
Recording alias 1.9 for ruby-1.9.3-p362.

&gt;rvm --default 1.9              

&gt;rvm alias list
1.9 =&gt; ruby-1.9.3-p362
default =&gt; ruby-1.9.3-p362
[/code]

Because scp ignores the alias' symbolic link status, all the links above  have a "<em>d</em>" signifying a real directory in the destination listing rather than the "<em>l</em>" signifying a link.  After doing a little research I could not find any way to change this scp behavior.  That being the case, I decided this approach was unacceptable.

<hr />

<h2>Better -- Using tar with nc</h2>

<em>nc</em>, also known as <em>netcat</em>, is a utility that, at its simplest, merely simulates <em>cat</em> over a network.  That is, nc reads from sockets and writes to sockets where cat reads from stdin and writes to stdout. Execute <code>man nc</code> to find out more about it.  Combining the netcat and tar commands on both the source and destination, you can:

On the source machine: create a tar file and send it to the destination
On the destination machine: receive the tar file and extract it, writing the files to the file system

Otherwise put, the flow of the data looks like this:

tar (source) -> nc (source) -> nc (destination) -> tar (destination)

One great thing that may not be readily apparent is that, thanks to Unix, all the component subtasks can be working simultaneously. The tar file is never really a static file, but rather a stream. One side benefit of this is that there is no need for disk space to accommodate the tar file on either end.  This makes it possible to copy full partitions.

Here are the actual commands I used:

On the destination machine, with the current directory set to where I want the files to be written:

[code lang="shell"]
nc -l 12345 | tar xzf -
[/code]

Some notes on this command:

<ul>
	<li>the "-l" tells netcat to listen on the specified port (12345 in this case)</li>

	<li>tar's "x" option tells tar to extract</li>

	<li>tar's "z" option tells tar to (un)compress</li>

	<li>tar's "f -" option says "I'm specifying the path, and it's stdin" (the hyphen is used by convention to mean stdin or stdout)</li>

</ul>

On the sending side, we execute this command:

[code lang="shell"]
&gt;time tar czf - . | nc destination_host 12345
tar czf - .  21.05s user 1.47s system 9% cpu 4:07.18 total
nc destination_host 12345  0.09s user 1.04s system 0% cpu 4:07.20 total
[/code]

<ul>
	<li>tar's "c" option tells tar to create an archive</li>
	<li>nc's options specify a destination host whose name is <code>destination_host</code>, on port 12345</li>
</ul>

This approach results in the correct handling of symbolic links. In addition, it's about 7.5 times faster, partly due to the data compression, but probably mostly because only one file (the tar file) needs to be handled by the transfer protocol, rather than tens of thousands.

<hr />

<h2>Best -- Using tar with ssh</h2>

<em>Note: This approach assumes that the source host's ssh port is open and sshd is running.
</em>
Although the previous approach was a great improvement, there are two potential issues with it:

<ul>
	<li>it requires access to shells on both hosts</li>
	<li>although the data is compressed, it is not encrypted</li>
</ul>

After some web searching, I found this excellent solution posted at <a href="http://www.linuxquestions.org/questions/linux-general-1/recursive-scp-w-o-following-links-658857/" title="http://www.linuxquestions.org/questions/linux-general-1/recursive-scp-w-o-following-links-658857/">http://www.linuxquestions.org/questions/linux-general-1/recursive-scp-w-o-following-links-658857/</a>.

It takes advantage of ssh's ability to execute a remote command and send its output to the local host's stdout.  This makes it possible to pipe the output to a local command, tar in this case:

[code lang="shell"]
&gt;time ssh keithb@source_host &quot;cd ~/.rvm; tar czf - .&quot; | tar xzf -
Password:
ssh keithb@source_host &quot;cd ~/.rvm; tar czf - .&quot;  2.31s user 0.75s system 7% cpu 38.676 total
tar xzf -  2.01s user 6.74s system 22% cpu 38.675 total
[/code]

This is over six times faster then the nc approach and 48 times faster than scp!  In addition, it is a single command executed from one host, and travels over an encrypted connection. Sweet!

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1137</wp:post_id>
		<wp:post_date><![CDATA[2012-12-29 14:24:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-12-29 19:24:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[copying-rvm-data-between-hosts-using-ssh-scp-and-netcat]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[brettbolen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hbbolen@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[24.211.208.103]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-01 23:03:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-02 04:03:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Rsynch over ssh is a handy tool.

Try rsync -avz -e ssh kbb@remote/path localpath


B253]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Using Oracle in JRuby with Rails and Sequel</title>
		<link>http://blog.bbs-software.com/index.php/2013/01/09/using-oracle-in-jruby-and-rails/</link>
		<pubDate>Wed, 09 Jan 2013 01:03:13 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=1221</guid>
		<description></description>
		<content:encoded><![CDATA[The Ruby culture prefers open source technologies, and when it comes to relational data bases, MySQL and Postgres are commonly used. However, there are times when the Rubyist will not be in a position to choose technologies and must inherit legacy decisions. For example, a common issue in the enterprise is the need to integrate with Oracle. In this article, I'll talk about integrating Oracle and JRuby (1), using both Active Record (Ruby on Rails) and the Sequel gem.

<!--more-->

<h3>JDBC</h3>

The JVM typically communicates with data bases using <a title="http://www.oracle.com/technetwork/java/javase/jdbc/index.html" href="http://www.oracle.com/technetwork/java/javase/jdbc/index.html">JDBC</a> (Java Data Base Connectivity). The JDBC layer provides an abstraction with which application code can access the data base without (for the most part) needing to know anything about its underlying implementation.

<h3>JDBC Jar Files</h3>

A JDBC jar (jar = <em><strong>j</strong></em>ava <em><strong>ar</strong></em>chive) file is provided for each data base product, typically by the vendor, and contains the code needed to implement the JDBC contract for that target data base. Since MySQL and Postgres are open source, their jar files can be freely copied around, and as a result, are included in the respective JDBC gems. This greatly simplifies configuration, since the gem takes care of storing and providing the location of the JDBC jar file.

The activerecord-jdbc-adapter gem includes several JDBC jar files. The complete list can be found by looking at the directory names beginning with "jdbc-" on the activerecord-jdbc-adapter GitHub page <a title="https://github.com/jruby/activerecord-jdbc-adapter" href="https://github.com/jruby/activerecord-jdbc-adapter">here</a>, and, at the time of this writing, consists of Derby, H2, Hypersonic, jTDS (SQL Server and Sybase), MySQL, Postgres, and SQLite.

<h3>Dealing with the Oracle JDBC Jar File</h3>

With Oracle, it's a different story. Oracle does not permit freely coping their JDBC jar file, and in order to download it, you'll probably need to go to the Oracle <a title="http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html" href="http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html">web site</a> and log in first. It would not be legal to write an Oracle JDBC gem that packaged this jar file, so, unfortunately, extra work is required.

The solution I chose was to:

1) download it to a directory outside of my project (/opt/oracle-jdbc/ojdbc6.jar)

2) have an environment variable point to it -- I added this to my ~/.zshrc file (you might use ~/.bashrc instead):

[code lang="shell"]
export ORACLE_JDBC_JAR=/opt/oracle-jdbc/ojdbc6.jar
[/code]

3) use that variable at runtime to locate it (separate solutions for Rails and Sequel below).
<h3>Oracle and Rails - environment.rb and database.yml</h3>
For Rails, you'll need this in your config/initializers/environment.rb so that the JDBC jar file can be found at runtime:

[code lang="shell"]
$CLASSPATH &lt;&lt; ENV['ORACLE_JDBC_JAR']
[/code]

Now you'll need to provide the appropriate values in the database.yml file (test and production groups are omitted for brevity):

[code]
&lt;%
  require 'socket';
  host_name = ENV['OJTEST_DB_HOSTNAME']
  host_ip   = IPSocket.getaddress(host_name)
  db_name   = ENV['OJTEST_DB_DBNAME']
  userid    = ENV['OJTEST_DB_USERID']
  password  = ENV['OJTEST_DB_PASSWORD']
  dev_url = &quot;jdbc:oracle:thin://@#{host_ip}:1521:#{db_name}&quot;
%&gt;

development:
  adapter: jdbc
  username: &lt;%= userid %&gt;
  password: &lt;%= password %&gt;
  driver: oracle.jdbc.OracleDriver
  url:  &lt;%= dev_url %&gt;
[/code]

As you can see, I used environment variables beginning with "OJTEST_DB_" to provide the required values, although that is not important and you can use any approach that works for you.

More importantly, note that I am translating the Oracle host's name to its IP address. This was necessary due to an apparent bug in Oracle's driver.

<h3>Oracle and the Sequel Gem</h3>

There is also the excellent <a title="https://github.com/jeremyevans/sequel" href="https://github.com/jeremyevans/sequel">Sequel</a> gem that can be used for general data base access, even (perhaps especially) in a minimal script. Here's a sample script that worked succesfully for me:

[code lang="ruby"]
#!/usr/bin/env ruby

require 'sequel'
require 'socket';

$CLASSPATH &lt;&lt; ENV['ORACLE_JDBC_JAR']

def init_connection

  host_name = ENV['OJTEST_DB_HOSTNAME']
  host_ip   = IPSocket.getaddress(host_name)

  db_name   = ENV['OJTEST_DB_DBNAME']

  userid    = ENV['OJTEST_DB_USERID']

  password  = ENV['OJTEST_DB_PASSWORD']

  dev_url = &quot;jdbc:oracle:thin://@#{host_ip}:1521:#{db_name}&quot;

  url = &quot;jdbc:oracle:thin:#{userid}/#{password}@#{host_name}:1521:#{db_name}&quot;

  puts &quot;Connecting to #{url}...&quot;
  db = Sequel.connect(url)
  puts 'Initialized connection.'
  db
end

def create_table(db)
  puts 'Creating table'
  # db.run &quot;CREATE TABLE artists (id NUMBER, name VARCHAR(255) NOT NULL)&quot;
  DB.create_table(:artists) do
    primary_key :id
    String :name
  end
end

def add_records(db)
  puts 'Adding records'
  dataset = db[:artists]
  dataset.insert(name: 'Vincent Van Gogh')
  dataset.insert(name: 'Lino of Cebu')
  dataset
end

def show_records(dataset)
  puts 'Showing records'
  dataset.map { |row| puts row[:name] }
end

# Call this once to set up the table with some records:
def setup(db)
  create_table(db)
  add_records(db)
end

DB = init_connection
# DB.run 'drop table artists'
setup(DB)
show_records(DB[:artists])
[/code]
<h3>Conclusion</h3>
This setup took me some time to figure out, but after I did, things went smoothly.  I'd like to hear if the approaches described here worked for you or if you have any problems with them.
<hr>

<strong>Footnotes:</strong>

(1) an implementation of Ruby that runs on the Java Virtual Machine (aka <em><a title="http://en.wikipedia.org/wiki/Java_virtual_machine" href="http://en.wikipedia.org/wiki/Java_virtual_machine">JVM</a></em>)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1221</wp:post_id>
		<wp:post_date><![CDATA[2013-01-09 01:03:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-01-09 01:03:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-oracle-in-jruby-and-rails]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jruby"><![CDATA[JRuby]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_vc_post_settings]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:10:"vc_grid_id";a:0:{}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>50</wp:comment_id>
			<wp:comment_author><![CDATA[substars]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ben.ortega@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.132.67.238]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-09 14:20:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-09 19:20:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool stuff! Just wanted to add that the activerecord-oracle_enhanced-adapter gem supports some additional Oracle-specific features and works on both JRuby (via JDBC) and MRI (with ruby-oci8):

https://github.com/rsim/oracle-enhanced]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://about.me/keithrbennett</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[198.24.31.70]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-14 16:18:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-14 21:18:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for that information.  I'll be sure to check that out if I have to do any serious work with Oracle again.

- Keith]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>50</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title> in Your System Prompt</title>
		<link>http://blog.bbs-software.com/index.php/2013/08/03/%ef%a3%bf-in-your-system-prompt/</link>
		<pubDate>Sun, 04 Aug 2013 01:08:34 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=1320</guid>
		<description></description>
		<content:encoded><![CDATA[In my daily work, I often connect to Linux boxes from my Mac.  With several terminal windows open, it's nice to easily see which ones are connected to my local Mac, and which ones are connected to other machines.  One can certainly insert the host name into the system prompt.  Here's an example that contains the time, host name, and current directory:

[code lang="shell"]
export PS1=&quot;\n\t \h:\w\n&gt; &quot;

21:02:45 my_host_name:~
&gt; 
[/code]

<a href="http://blog.twistedcode.org/2008/03/customizing-your-bash-prompt.html" title="http://blog.twistedcode.org/2008/03/customizing-your-bash-prompt.html">http://blog.twistedcode.org/2008/03/customizing-your-bash-prompt.html</a> has a lot of information about customized bash prompts.

Wait a minute, I thought, I wonder if there's a Unicode character that can be included in the prompt that will jump out at me to tell me where I am...so I searched the web, and on <a href="http://hea-www.harvard.edu/~fine/OSX/unicode_apple_logo.html" title="http://hea-www.harvard.edu/~fine/OSX/unicode_apple_logo.html">http://hea-www.harvard.edu/~fine/OSX/unicode_apple_logo.html</a> was the apple logo!

So I now have the Apple logo as the very first character of my system prompt.  A picture grabs the eye more effectively than a letter, so it's much easier now to tell that this terminal is connected to my Mac:

[code lang="shell"]
export PS1=&quot;\n \t \h:\w\n&gt; &quot;
 
 21:00:50 my_host_name:~
&gt; 
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1320</wp:post_id>
		<wp:post_date><![CDATA[2013-08-03 21:08:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-04 01:08:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ef%a3%bf-in-your-system-prompt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[コマンドプロンプトにリンゴマークを表示するとても簡単な方法 | ソフトアンテナブログ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.softantenna.com/wp/etc/apple-mark-at-the-terminal/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[112.78.112.41]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-08-05 07:41:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-08-05 11:41:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] コマンドプロンプトにリンゴマークを表示するコロンブスの卵的な方法が紹介されていました( in Your System Prompt)。 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375702877.2594261;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Ruby&#039;s inject/reduce and each_with_object</title>
		<link>http://blog.bbs-software.com/index.php/2013/11/22/rubys-injectreduce-and-each_with_object/</link>
		<pubDate>Fri, 22 Nov 2013 06:18:48 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=1327</guid>
		<description></description>
		<content:encoded><![CDATA[For an object oriented language, Ruby's functional features are pretty awesome. The  productivity boost of Enumerable methods was one of the most exciting things for me when I first encountered Ruby, and that has continued to be the case.

In the examples below, I'll use trivial sum methods to illustrate. Assume the parameter passed is always an array of numbers, <code>[1, 2, 3]</code>.

<code>each</code>, <code>map</code>, and <code>select</code> were simple to understand and implement, but <code>inject</code> (<code>reduce</code>) took a little more effort. When I see code like the example below, I remember the times when I was inject-phobic:

[code lang="ruby"]
def verbose_sum(numbers)
  sum = 0
  numbers.each { |n| sum += n }
  sum
end
[/code]

This is way more verbose than it needs to be.  Consider the equivalent inject method:

[code lang="ruby"]
def concise_sum(numbers)
  numbers.inject(0) { |sum, n| sum += n }
end
[/code]

...which can be reduced even further, since we're calling a method on each object that takes no arguments (the <code>+</code> method):

[code lang="ruby"]
def more_concise_sum(numbers)
  numbers.inject(0, :+)
end
[/code]

One can even omit the zero and it will be inferred:

[code lang="ruby"]
def even_more_concise_sum(numbers)
  numbers.inject(:+)
end
[/code]

Nice, eh?  However, let's revisit the block variant of the method and see what happens if we add a <code>puts</code> statement at the end of such a block, and then call it:

[code lang="ruby"]
def concise_sum(numbers)
  numbers.inject(0) do |sum, n|
    sum += n
    puts &quot;sum is now #{sum}.&quot;
  end
end

# produces: NoMethodError: undefined method `+' for nil:NilClass
[/code]

What happened?  When using <code>inject</code>, the value returned by the block is the value <code>inject</code> will use as the memo for the next iteration.  Since <code>puts</code> returns <code>nil</code>, and it was the last expression in the block, it was used as the memo in the next iteration, and the error occurred.

Enter <code>each_with_object</code>. Instead of using the block's return value as the memo for the next iteration, <code>each_with_object</code> unconditionally passes the object with which it was initialized.  It relies on you to modify that object as per your needs in the block.  So the <code>each_with_object</code> version of <code>sum</code> would look like this:

[code lang="ruby"]
def ewo_sum(numbers)
  numbers.each_with_object(0) { |n, sum| sum += n }
end
[/code]

Note that the order of the parameters is reversed, compared with inject. I remember the order by remembering that it's the same order listed in the method name itself -- <em>each</em> is the object for each iteration and comes first, and <em>with_object</em> is the memo object and comes next.

When we run this code, we get...zero.  WTF!?!?!?!?

Let's see if it works using a hash instead.  For the example, this hash will contain each number as a key, with the key's <code>to_s</code> representation as the value:

[code lang="ruby"]
def stringified_key_hash(numbers)
  numbers.each_with_object({}) do |n, hsh|
    hsh[n] = n.to_s
  end
end
[/code]

When we run this, we get:

[code lang="ruby"]
=&gt; {1=&gt;&quot;1&quot;, 2=&gt;&quot;2&quot;, 3=&gt;&quot;3&quot;}
[/code]

This worked!  So how are the two different?  As previously mentioned, the block must modify the object initially passed to the <code>each_with_object</code> method.  In the case of <code>stringified_key_hash</code>, we're fine because we've passed in a <code>Hash</code> instance, and when we modify it using <code>[]=</code> in every iteration, we're always dealing with that same hash instance.

In contrast, when we used <code>each_with_object</code> in <code>ewo_sum</code>, the initial value was a <code>Fixnum</code> whose value was 0.  The expression "<code>sum += n</code>" assigned and returned <em>a different instance</em> of <code>Fixnum</code>. Note that the object id's for <code>sum</code> differ before and after this expression is evaluated:

[code lang="ruby"]
[21] pry(main)&gt; sum = 0
=&gt; 0
[22] pry(main)&gt; sum.object_id
=&gt; 1
[23] pry(main)&gt; sum += 3
=&gt; 3
[24] pry(main)&gt; sum.object_id
=&gt; 7
[/code]

Since, as we said, the initial value is unconditionally passed to the block in each iteration, the revised value created in the block was discarded.  So, when using <code>each_with_object</code>, be sure that the modifications are being made to the original memo instance.

Now let's go back to the earlier point about having to return the memo as the last expression of the block.  Since <code>each_with_object</code> unconditionally passes the initial object, there is no need for the block to return it.  If we add a puts to <code>stringified_key_hash</code>, we still get the correct result:

[code lang="ruby"]
def stringified_key_hash(numbers)
  numbers.each_with_object({}) do |n, hsh|
    hsh[n] = n.to_s
    puts &quot;Hash is now #{hsh}.&quot;
  end
end

Hash is now {1=&gt;&quot;1&quot;}.
Hash is now {1=&gt;&quot;1&quot;, 2=&gt;&quot;2&quot;}.
Hash is now {1=&gt;&quot;1&quot;, 2=&gt;&quot;2&quot;, 3=&gt;&quot;3&quot;}.
=&gt; {1=&gt;&quot;1&quot;, 2=&gt;&quot;2&quot;, 3=&gt;&quot;3&quot;}
[/code]

A minor point about my choice of <code>hsh</code> as a variable name...it's a good idea not to use <code>hash</code> as a variable name, because, in any object that is a class that includes <code>Kernel</code> in its ancestors, <code>hash</code> will be a method name:

[code lang="ruby"]
[36] pry(main)&gt; hash
=&gt; -1606748642386923196
[37] pry(main)&gt; Object.new.hash
=&gt; 4200367341767882288
[/code]

While it's unlikely that this name collision would bite you, it's not impossible.  Better to avoid the possibility altogether.

And why do I use <code>hsh</code> and not a more descriptive name like the method name <code>stringified_key_hash</code>?  We already have the more descriptive method name, where it is most valuable, since that name is for the exposed API, whereas the block variable is one that API users need never see. The need for a descriptive name for the block variable is greatly reduced by its narrow scope and its proximity to the more descriptive method name.

<h2>Conclusion</h2>

One could say that <code>inject</code> and <code>each_with_object</code> are different methods that behave differently intentionally, and one should choose which one to use based on the use case. However, in my (perhaps limited) experience, I have never encountered the need to return instances different from the initial instance in a block, and I find myself <em>always</em> using <code>each_with_object</code> these days.  The only reason I even discovered the <code>each_with_object Fixnum </code>issue was that I was involved in a discussion about <code>each_with_object</code> and wanted to produce a minimal example of it.

That said, isn't it great how many choices we have?  More than any other piece of code I know of, the Enumerable (<a href="http://apidock.com/ruby/v1_9_3_392/Enumerable">1.9</a>, <a href="http://ruby-doc.org/core-2.0.0/Enumerable.html" title="Enumerable 2.0">2.0</a>) module is a treasure trove that perpetually pleases.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1327</wp:post_id>
		<wp:post_date><![CDATA[2013-11-22 01:18:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-11-22 06:18:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rubys-injectreduce-and-each_with_object]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[keithrbennett]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keithrbennett@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://about.me/keithrbennett</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.168.239.87]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-11-26 16:57:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-11-26 21:57:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I got this informative response from Tom Enebo on the Minnesota Ruby Group (ruby-mn Google group). Tom is the Tom in the Tom and Charlie (Nutter) team that's responsible for JRuby.

====

Good writeup Keith.  The legacy of inject as a functional programming staple and each_with_object as its newer mutable cousin is pretty fascinating to me.   Ruby has this weird combination of conditions:

1. We create tons of short-lived objects
2. Ruby is heavily mutable
3. MRI GC is slow

So inject feels the more natural to me (Keith: you could have did 'sum + n' vs 'sum += n' in your example although I suspect you did that to tie it better to each_with_object example) but it creates objects and MRI's GC is slow...each_with_object is born.   MRI keeps speeding up by internally and externally relying on reducing object creation and leveraging mutable state. 

As time marches on we are seeing design decisions increasingly made based on performance characteristics vs programmer ergonomics...

-Tom]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385503058.496969;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:13:"keithrbennett";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>The Case for Nested Methods in Ruby</title>
		<link>http://blog.bbs-software.com/index.php/2015/11/07/the-case-for-nested-methods-in-ruby/</link>
		<pubDate>Sat, 07 Nov 2015 21:13:15 +0000</pubDate>
		<dc:creator><![CDATA[keithrbennett]]></dc:creator>
		<guid isPermaLink="false">http://www.bbs-software.com/blog/?p=1344</guid>
		<description></description>
		<content:encoded><![CDATA[The wisdom of using local variables has been internalized in all of us from the beginning of our software careers.  If we need a variable referring to data that is used only in a single method, we create a local variable for it.

Yet if it is logic to which we need to refer, we make it an instance method instead.

In my opinion, this is inconsistent and unfortunate. The result is a bloated set of instance methods that the reader must wade through to mentally parse the class.  The fact that some of these methods are used only by one other method is never communicated by the code; the reader has to discover that for him/herself.

The number of possible interactions among the instance methods is one of many measures of our software's complexity.  The number of possible instance method interactions is <code>(method_count * (method_count) - 1)</code>.  Using this formula, a class with 10 methods will have a complexity of 90.  If 4 of those methods are used by only 1 other method, and we could move them inside those methods, the complexity would plummet to 30 <code>(6 * (6 - 1))</code>, a third of the original amount!

While it is possible to extract subsets of these methods into new smaller classes, this is not always practical, especially in the case of methods called only by the constructor.

Fortunately, we do have lambdas in Ruby, so I will sometimes create lambdas inside methods for this purpose.  However, lambdas are not as isolated as methods, in that they can access and modify local variables previously defined outside their scope.  Furthermore, the lambdas can be passed elsewhere in the program and modify those locals from afar! So using methods would be cleaner and safer.

Another weakness of using lambdas for this purpose is that, unlike methods that are created at interpret time, lambdas are objects created at runtime -- so if a method creating 2 lambdas is called a million times in a loop, you'll need to create and garbage collect another 2 million objects. (This can be circumvented by defining the lambdas as class constants or assigning them to instance variables, but then they might as well be instance methods.)

I realize that implementing this feature would be a substantial undertaking and may not be feasible at this time. That said, I think it would be useful to discuss this now so we might benefit from its implementation someday.

* * * *

(Much of this content is communicated in my talk on Ruby lambdas; slide show is at <a href="https://speakerdeck.com/keithrbennett/ruby-lambdas-functional-conf-bangalore-oct-2014">https://speakerdeck.com/keithrbennett/ruby-lambdas-functional-conf-bangalore-oct-2014</a> and YouTube video of the presentation at FunctionalConf in Bangalore at <a href="https://www.youtube.com/watch?v=hyRgf6Qc5pw">https://www.youtube.com/watch?v=hyRgf6Qc5pw</a>.)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1344</wp:post_id>
		<wp:post_date><![CDATA[2015-11-07 16:13:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-07 21:13:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-case-for-nested-methods-in-ruby]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_mk_post_love]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[DavidHaild]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[greatmind@testosteronusa.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://9binaryoptions.com/uploads/reviews/best-passive-income.htm</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[31.184.238.80]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-30 05:29:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-30 05:29:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How to make money on the internet today 
 
Guys, tired of sitting with no money? 
I was just a poor student, and now i make 1000$ - 1500$ every day here: <a href="http://9binaryoptions.com/uploads/reviews/index.htm" rel="nofollow"> How to earn on the Internet </a> 
It works! Checked. Good luck to all! 
 
http://9binaryoptions.com/uploads/posts/2017-01/binary_options_easy_money.jpg 
 
Earnings on the Internet from $ 1500 here <a href="http://9binaryoptions.com/uploads/reviews/index.htm" rel="nofollow"> How to earn on the Internet </a>] Start Now! 
 
This method of earnings is available in all countries! These articles will help you: 
http://9binaryoptions.com/uploads/reviews/make-free-money-online.htm 
http://9binaryoptions.com/uploads/reviews/how-i-earn-money.htm <b> how i earn money </b> 
<a href="http://9binaryoptions.com/uploads/reviews/quick-money-making-ideas.htm" rel="nofollow"> quick money making ideas </a> 
http://9binaryoptions.com/uploads/reviews/how-get-money-online.htm <b> how get money online </b> 
<b> Бинарные опционы список </b> <a href="http://9binaryoptions.com/platformy-dlya-treydinga.html" rel="nofollow">http://9binaryoptions.com/platformy-dlya-treydinga.html</a> 
<b> Бинарные опционы обучение </b> <a href="http://9binaryoptions.com/binarnye-opciony-obuchenie.html" rel="nofollow">http://9binaryoptions.com/binarnye-opciony-obuchenie.html</a> 
<b> Реальные бинарные опционы </b> <a href="http://9binaryoptions.com/platformy-dlya-treydinga.html" rel="nofollow"> Реальные бинарные опционы </a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
